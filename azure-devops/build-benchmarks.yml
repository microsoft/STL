# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

parameters:
- name: hostArch
  type: string
- name: targetArch
  type: string
- name: targetPlatform
  type: string
- name: buildBenchmarks
  type: boolean
- name: compiler
  type: string

steps:
- script: |
    if exist "$(benchmarkBuildOutputLocation)\${{ parameters.compiler }}" (
      rmdir /S /Q "$(benchmarkBuildOutputLocation)\${{ parameters.compiler }}"
    )
    call "%ProgramFiles%\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat" ^
    -host_arch=${{ parameters.hostArch }} -arch=${{ parameters.targetArch }} -no_logo
    cmake -G Ninja ^
    -DCMAKE_CXX_COMPILER=${{ parameters.compiler }} ^
    -DCMAKE_BUILD_TYPE=Release ^
    -DSTL_BINARY_DIR="$(buildOutputLocation)" ^
    -DVCLIBS_TARGET_ARCHITECTURE=${{ parameters.targetPlatform }} ^
    -S $(Build.SourcesDirectory)/benchmarks -B "$(benchmarkBuildOutputLocation)\${{ parameters.compiler }}"
  displayName: 'Configure the benchmarks for ${{ parameters.compiler }}'
  timeoutInMinutes: 2
  env: { TMP: $(tmpDir), TEMP: $(tmpDir) }
  # TRANSITION, we currently don't build the benchmarks with Clang for ARM64 or ARM64EC
  condition: >
    and(succeeded(), ${{ parameters.buildBenchmarks }},
      not(and(eq('${{ parameters.compiler }}', 'clang-cl'), startsWith('${{ parameters.targetPlatform }}', 'arm64'))))
- script: |
    call "%ProgramFiles%\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat" ^
    -host_arch=${{ parameters.hostArch }} -arch=${{ parameters.targetArch }} -no_logo
    cmake --build "$(benchmarkBuildOutputLocation)\${{ parameters.compiler }}"
  displayName: 'Build the benchmarks for ${{ parameters.compiler }}'
  timeoutInMinutes: 2
  env: { TMP: $(tmpDir), TEMP: $(tmpDir) }
  # TRANSITION, we currently don't build the benchmarks with Clang for ARM64 or ARM64EC
  condition: >
    and(succeeded(), ${{ parameters.buildBenchmarks }},
      not(and(eq('${{ parameters.compiler }}', 'clang-cl'), startsWith('${{ parameters.targetPlatform }}', 'arm64'))))
