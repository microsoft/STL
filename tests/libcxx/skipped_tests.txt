# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

# *** ISSUES REPORTED/KNOWN UPSTREAM ***
# Non-Standard regex behavior.
# "It seems likely that the test is still non-conforming due to how libc++ handles the 'w' character class."
re\re.traits\lookup_classname.pass.cpp

# These tests are extremely slow, taking over 23 minutes to execute (in debug mode, non-optimized).
# They contain 10K^2 / 2 == 50M loops.
input.output\iostreams.base\ios.base\ios.base.storage\iword.pass.cpp
input.output\iostreams.base\ios.base\ios.base.storage\pword.pass.cpp

# "The behavior demonstrated in this test is not meant to be standard"
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.ctor\null.pass.cpp

# allocator<const T>
iterators\iterator.requirements\iterator.cust\iterator.cust.move\iter_rvalue_reference_t.pass.cpp
utilities\memory\default.allocator\allocator.ctor.pass.cpp

# This test is passing non-BidirectionalIterators to std::prev.
# LWG-3197 "std::prev should not require BidirectionalIterator" (New)
iterators\iterator.primitives\iterator.operations\prev.pass.cpp

# Itanium ABI assumptions that current_exception and rethrow_exception don't copy the exception object
language.support\support.exception\except.nested\rethrow_if_nested.pass.cpp
language.support\support.exception\propagation\current_exception.pass.cpp
language.support\support.exception\propagation\make_exception_ptr.pass.cpp
language.support\support.exception\propagation\rethrow_exception.pass.cpp

# Testing nonstandard behavior
utilities\template.bitset\bitset.cons\string_ctor.pass.cpp

# Tests with undefined behavior under N4842 [basic.start.term]/6 (detached threads)
thread\futures\futures.task\futures.task.members\dtor.pass.cpp
thread\futures\futures.unique_future\wait_until.pass.cpp

# libcxx is incorrect on what the type passed to allocator::construct should be (https://reviews.llvm.org/D61364)
containers\associative\map\map.modifiers\insert_and_emplace_allocator_requirements.pass.cpp
containers\associative\set\insert_and_emplace_allocator_requirements.pass.cpp
containers\unord\unord.map\unord.map.modifiers\insert_and_emplace_allocator_requirements.pass.cpp
containers\unord\unord.set\insert_and_emplace_allocator_requirements.pass.cpp

# libc++ doesn't yet implement P1423R3, so it expects an old value for `__cpp_lib_char8_t`
language.support\support.limits\support.limits.general\atomic.version.pass.cpp
language.support\support.limits\support.limits.general\filesystem.version.pass.cpp
language.support\support.limits\support.limits.general\istream.version.pass.cpp
language.support\support.limits\support.limits.general\limits.version.pass.cpp
language.support\support.limits\support.limits.general\locale.version.pass.cpp
language.support\support.limits\support.limits.general\ostream.version.pass.cpp
language.support\support.limits\support.limits.general\string_view.version.pass.cpp

# libc++ doesn't yet implement P2231R1, so it expects an old value for `__cpp_lib_optional`
language.support\support.limits\support.limits.general\optional.version.pass.cpp

# Bogus test believes that copyability of array<T, 0> must be the same as array<T, 1>
containers\sequences\array\array.cons\implicit_copy.pass.cpp

# string_view and array iterators are not portably pointers (https://reviews.llvm.org/D117368)
iterators\iterator.primitives\iterator.traits\cxx20_iterator_traits.compile.pass.cpp
iterators\iterator.requirements\iterator.cust\iterator.cust.move\iter_move.pass.cpp
strings\string.view\string.view.cons\from_iterator_sentinel.pass.cpp
strings\string.view\string.view.deduct\iterator_sentinel.pass.cpp
utilities\format\format.formatter\format.parse.ctx\advance_to.pass.cpp
utilities\format\format.formatter\format.parse.ctx\begin.pass.cpp
utilities\format\format.formatter\format.parse.ctx\ctor.pass.cpp
utilities\format\format.formatter\format.parse.ctx\end.pass.cpp

# libc++ doesn't correctly constrain the iterator_traits specialization for common_iterator (https://reviews.llvm.org/D117449)
iterators\predef.iterators\iterators.common\iterator_traits.compile.pass.cpp

# libc++ hasn't updated {move,reverse}_iterator for P0896R4
iterators\predef.iterators\move.iterators\move.iter.ops\move.iter.op=\move_iterator.pass.cpp
iterators\predef.iterators\move.iterators\move.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\reverse.iterators\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\reverse.iterators\reverse.iter.cmp\three-way.pass.cpp
iterators\predef.iterators\reverse.iterators\reverse.iter.cons\assign.pass.cpp

# optional's comparisons aren't portably constrained (https://reviews.llvm.org/D116884)
concepts\concepts.compare\concepts.totallyordered\totally_ordered.pass.cpp
concepts\concepts.compare\concept.equalitycomparable\equality_comparable.compile.pass.cpp

# libc++ doesn't implement LWG-3648: "format should not print bool with 'c'"
utilities\format\format.functions\vformat_to.locale.pass.cpp
utilities\format\format.functions\vformat_to.pass.cpp
utilities\format\format.functions\vformat.locale.pass.cpp
utilities\format\format.functions\vformat.pass.cpp

# libc++ doesn't implement P2321R2's changes to vector<bool>::reference
containers\sequences\vector.bool\iterator_concept_conformance.compile.pass.cpp


# *** INTERACTIONS WITH CONTEST / C1XX THAT UPSTREAM LIKELY WON'T FIX ***
# Tracked by VSO-593630 "<filesystem> Enable libcxx filesystem tests"
# rapid-cxx-test.hpp uses pragma system_header
# test header filesystem_test_helper.hpp emits "error: "STATIC TESTS DISABLED""
# const_cast from const std::wstring& to std::string& is not allowed
input.output\filesystems\class.directory_entry\directory_entry.cons\copy.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.cons\copy_assign.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.cons\move.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.cons\move_assign.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.cons\path.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.mods\assign.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.mods\refresh.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.mods\replace_filename.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\file_size.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\file_type_obs.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\hard_link_count.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\last_write_time.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\status.pass.cpp
input.output\filesystems\class.directory_entry\directory_entry.obs\symlink_status.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\copy.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\copy_assign.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\ctor.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\increment.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\move.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.members\move_assign.pass.cpp
input.output\filesystems\class.directory_iterator\directory_iterator.nonmembers\begin_end.pass.cpp
input.output\filesystems\class.path\synop.pass.cpp
input.output\filesystems\class.path\path.itr\iterator.pass.cpp
input.output\filesystems\class.path\path.member\path.append.pass.cpp
input.output\filesystems\class.path\path.member\path.compare.pass.cpp
input.output\filesystems\class.path\path.member\path.concat.pass.cpp
input.output\filesystems\class.path\path.member\path.assign\copy.pass.cpp
input.output\filesystems\class.path\path.member\path.assign\move.pass.cpp
input.output\filesystems\class.path\path.member\path.assign\source.pass.cpp
input.output\filesystems\class.path\path.member\path.construct\copy.pass.cpp
input.output\filesystems\class.path\path.member\path.construct\move.pass.cpp
input.output\filesystems\class.path\path.member\path.construct\source.pass.cpp
input.output\filesystems\class.path\path.member\path.decompose\path.decompose.pass.cpp
input.output\filesystems\class.path\path.member\path.gen\lexically_normal.pass.cpp
input.output\filesystems\class.path\path.member\path.gen\lexically_relative_and_proximate.pass.cpp
input.output\filesystems\class.path\path.member\path.generic.obs\generic_string_alloc.pass.cpp
input.output\filesystems\class.path\path.member\path.generic.obs\named_overloads.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\clear.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\make_preferred.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\remove_filename.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\replace_extension.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\replace_filename.pass.cpp
input.output\filesystems\class.path\path.member\path.modifiers\swap.pass.cpp
input.output\filesystems\class.path\path.member\path.native.obs\c_str.pass.cpp
input.output\filesystems\class.path\path.member\path.native.obs\named_overloads.pass.cpp
input.output\filesystems\class.path\path.member\path.native.obs\native.pass.cpp
input.output\filesystems\class.path\path.member\path.native.obs\operator_string.pass.cpp
input.output\filesystems\class.path\path.nonmember\append_op.pass.cpp
input.output\filesystems\class.path\path.nonmember\path.factory.pass.cpp
input.output\filesystems\class.path\path.nonmember\path.io.pass.cpp
input.output\filesystems\class.path\path.nonmember\path.io.unicode_bug.pass.cpp
input.output\filesystems\class.path\path.nonmember\swap.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\copy.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\copy_assign.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\ctor.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\depth.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\disable_recursion_pending.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\increment.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\move.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\move_assign.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\pop.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.members\recursion_pending.pass.cpp
input.output\filesystems\class.rec.dir.itr\rec.dir.itr.nonmembers\begin_end.pass.cpp
input.output\filesystems\fs.enum\enum.copy_options.pass.cpp
input.output\filesystems\fs.enum\enum.directory_options.pass.cpp
input.output\filesystems\fs.enum\enum.file_type.pass.cpp
input.output\filesystems\fs.enum\enum.path.format.pass.cpp
input.output\filesystems\fs.enum\enum.perms.pass.cpp
input.output\filesystems\fs.enum\enum.perm_options.pass.cpp
input.output\filesystems\fs.filesystem.synopsis\file_time_type.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.absolute\absolute.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.canonical\canonical.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.copy\copy.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.copy_file\copy_file.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.copy_file\copy_file_large.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.copy_symlink\copy_symlink.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_directories\create_directories.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_directory\create_directory.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_directory\create_directory_with_attributes.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_directory_symlink\create_directory_symlink.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_hard_link\create_hard_link.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.create_symlink\create_symlink.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.current_path\current_path.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.equivalent\equivalent.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.exists\exists.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.file_size\file_size.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.hard_lk_ct\hard_link_count.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_block_file\is_block_file.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_char_file\is_character_file.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_directory\is_directory.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_empty\is_empty.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_fifo\is_fifo.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_other\is_other.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_regular_file\is_regular_file.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_socket\is_socket.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.is_symlink\is_symlink.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.last_write_time\last_write_time.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.permissions\permissions.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.proximate\proximate.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.read_symlink\read_symlink.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.relative\relative.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.remove\remove.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.remove_all\remove_all.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.rename\rename.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.resize_file\resize_file.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.space\space.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.status\status.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.status_known\status_known.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.symlink_status\symlink_status.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.temp_dir_path\temp_directory_path.pass.cpp
input.output\filesystems\fs.op.funcs\fs.op.weakly_canonical\weakly_canonical.pass.cpp

# generate_feature_test_macro_components.py needs to learn about C1XX
language.support\support.limits\support.limits.general\version.version.pass.cpp

# These tests set an allocator with a max_size() too small to default construct an unordered container
# (due to our minimum bucket size).
containers\unord\unord.map\max_size.pass.cpp
containers\unord\unord.multimap\max_size.pass.cpp
containers\unord\unord.multiset\max_size.pass.cpp
containers\unord\unord.set\max_size.pass.cpp

# Extreme compiler memory consumption.
utilities\tuple\tuple.tuple\tuple.apply\apply_large_arity.pass.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\recursion_depth.pass.cpp

# Deprecation is a mess. We disable all deprecations in llvm-project/libcxx/test/support/msvc_stdlib_force_include.h
# (external to this repo) to allow libc++ tests for deprecated features to pass, which breaks when libc++ deprecates
# the feature and adds two tests that (1) pass with deprecation suppressed, and (2) fail without deprecation suppression.
# We should instead translate libc++ un-deprecation macros to STL un-deprecation macros in the force-include header,
# and just skip tests when we deprecate before they do.
utilities\meta\meta.unary\meta.unary.prop\is_literal_type.deprecated.fail.cpp


# *** MISSING STL FEATURES ***
# P2321R2 zip
language.support\support.limits\support.limits.general\tuple.version.pass.cpp
language.support\support.limits\support.limits.general\utility.version.pass.cpp


# *** MISSING COMPILER FEATURES ***
# Nothing here! :-)


# *** MISSING LWG ISSUE RESOLUTIONS ***
# LWG-2503 "multiline option should be added to syntax_option_type"
re\re.const\re.matchflag\match_multiline.pass.cpp

# LWG-2532 "Satisfying a promise at thread exit" (Open)
# WCFB02 implements the proposed resolution for this issue
thread\futures\futures.promise\set_exception_at_thread_exit.pass.cpp
thread\futures\futures.promise\set_lvalue_at_thread_exit.pass.cpp
thread\futures\futures.promise\set_rvalue_at_thread_exit.pass.cpp
thread\futures\futures.promise\set_value_at_thread_exit_const.pass.cpp
thread\futures\futures.promise\set_value_at_thread_exit_void.pass.cpp
thread\futures\futures.task\futures.task.members\make_ready_at_thread_exit.pass.cpp

# LWG-3633 "Atomics are copy constructible and copy assignable from volatile atomics" (Open)
atomics\atomics.types.generic\copy_semantics_traits.pass.cpp


# *** C1XX COMPILER BUGS ***
# DevCom-409222 "Constructing rvalue reference from non-reference-related lvalue reference"
utilities\meta\meta.unary\meta.unary.prop\is_constructible.pass.cpp

# VSO-1271673 "static analyzer doesn't know about short-circuiting"
algorithms\alg.sorting\alg.sort\partial.sort\partial_sort.pass.cpp
algorithms\alg.sorting\alg.sort\partial.sort\partial_sort_comp.pass.cpp

# DevCom-1559808: (structured bindings for `subrange` in a constant expression)
# Skipped as this sometimes emits "fatal error C1001: Internal compiler error." with a crash dialog.
ranges\range.utility\range.subrange\structured_bindings.pass.cpp

# DevCom-1626139 "compile-time NaN comparison"
iterators\predef.iterators\reverse.iterators\reverse.iter.cmp\three-way.pass.cpp
library\description\conventions\expos.only.func\synth_three_way.pass.cpp
utilities\function.objects\comparisons\compare_three_way.pass.cpp
utilities\tuple\tuple.tuple\tuple.rel\three_way.pass.cpp
utilities\utility\pairs\pairs.spec\three_way_comparison.pass.cpp

# DevCom-1626727: bogus "failure was caused by a conversion from void* to a pointer-to-object type" for conversion to void
algorithms\robust_re_difference_type.compile.pass.cpp

# DevCom-1638496: C1XX doesn't properly reject int <=> unsigned
language.support\cmp\cmp.concept\three_way_comparable_with.compile.pass.cpp
language.support\cmp\cmp.result\compare_three_way_result.compile.pass.cpp
utilities\tuple\tuple.tuple\tuple.rel\three_way.pass.cpp

# DevCom-1638563: icky static analysis false positive
language.support\support.coroutines\end.to.end\go.pass.cpp

# DevCom-10026599: conditional expression has two different types
concepts\concepts.compare\concept.equalitycomparable\equality_comparable_with.compile.pass.cpp


# *** CLANG COMPILER BUGS ***
# LLVM-46207 Clang's tgmath.h interferes with the UCRT's tgmath.h
depr\depr.c.headers\tgmath_h.pass.cpp

# Clang doesn't yet implement P0960 "Initializing Aggregates With Parentheses"
ranges\range.factories\range.iota.view\sentinel\ctor.value.pass.cpp


# *** CLANG ISSUES, NOT YET ANALYZED ***
# Clang doesn't enable sized deallocation by default. Should we add -fsized-deallocation or do something else?
language.support\support.dynamic\new.delete\new.delete.array\sized_delete_array_fsizeddeallocation.pass.cpp
language.support\support.dynamic\new.delete\new.delete.array\sized_delete_array14.pass.cpp
language.support\support.dynamic\new.delete\new.delete.single\sized_delete_fsizeddeallocation.pass.cpp
language.support\support.dynamic\new.delete\new.delete.single\sized_delete14.pass.cpp

# Not yet analyzed. Clang apparently defines platform macros differently from C1XX.
language.support\support.limits\limits\numeric.limits.members\traps.pass.cpp


# *** STL BUGS ***
# GH-1112 <locale>: the enum value of std::money_base is not correct
localization\locale.categories\category.monetary\locale.moneypunct\money_base.pass.cpp

# GH-1113 <fstream>: basic_filebuf doesn't comply with setbuf(0,0) requirement in the standard
input.output\file.streams\fstreams\filebuf.virtuals\overflow.pass.cpp
input.output\file.streams\fstreams\filebuf.virtuals\underflow.pass.cpp

# GH-1295 <array>: array<const T, 0> allows fill() and swap()
containers\sequences\array\array.fill\fill.fail.cpp
containers\sequences\array\array.swap\swap.fail.cpp

# GH-1006 <algorithm>: debug checks for predicates are observable
algorithms\alg.sorting\alg.merge\inplace_merge_comp.pass.cpp
algorithms\alg.sorting\alg.min.max\minmax_init_list_comp.pass.cpp

# GH-1259 <locale>: wrong field extraction for hexfloats, or special cases like inf
localization\locale.categories\category.numeric\locale.num.get\facet.num.get.members\get_double.pass.cpp
localization\locale.categories\category.numeric\locale.num.get\facet.num.get.members\get_float.pass.cpp
localization\locale.categories\category.numeric\locale.num.get\facet.num.get.members\get_long_double.pass.cpp

# GH-1277 <xlocnum>: We don't match numpunct groups correctly in do_get
localization\locale.categories\category.numeric\locale.num.get\facet.num.get.members\get_long.pass.cpp

# GH-1275 <locale>: missing some locale names
# We don't have the locale names libcxx wants specialized in platform_support.hpp
# More bugs may be uncovered when the locale names are present.
# move.pass.cpp can crash.
input.output\iostreams.base\ios\basic.ios.members\move.pass.cpp
localization\locale.categories\category.collate\locale.collate.byname\compare.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\is_1.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\is_many.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\narrow_1.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\narrow_many.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\scan_is.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\scan_not.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\widen_1.pass.cpp
localization\locale.categories\category.ctype\locale.ctype.byname\widen_many.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\curr_symbol.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\decimal_point.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\grouping.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\neg_format.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\negative_sign.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\pos_format.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct.byname\thousands_sep.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_date.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_date_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_monthname.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_monthname_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_one.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_one_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_weekday.pass.cpp
localization\locale.categories\category.time\locale.time.get.byname\get_weekday_wide.pass.cpp
localization\locale.categories\category.time\locale.time.put.byname\put1.pass.cpp
localization\locale.categories\facet.numpunct\locale.numpunct.byname\grouping.pass.cpp
localization\locale.categories\facet.numpunct\locale.numpunct.byname\thousands_sep.pass.cpp

# GH-1264 <locale>: wbuffer_convert does not implement seek
localization\locales\locale.convenience\conversions\conversions.buffer\seekoff.pass.cpp

# GH-1116 <system_error>: error_category's default ctor isn't constexpr.
diagnostics\syserr\syserr.errcat\syserr.errcat.nonvirtuals\default_ctor.pass.cpp

# GH-1190 <future>: incorrectly used copy assignment instead of copy construction in set_value
thread\futures\futures.promise\set_value_const.pass.cpp

# GH-784 <type_traits>: aligned_storage has incorrect alignment defaults
utilities\meta\meta.trans\meta.trans.other\aligned_storage.pass.cpp

# GH-519 <cmath>: signbit() misses overloads for integer types
depr\depr.c.headers\math_h.pass.cpp
numerics\c.math\cmath.pass.cpp

# GH-2358: <filesystem>: path's comparison operators are IF-NDR
input.output\filesystems\class.path\range_concept_conformance.compile.pass.cpp

# GH-1374: Spaceship CPO wording in [cmp.alg] needs an overhaul
# (Technically an STL bug until the wording in the working draft is fixed to agree.)
language.support\cmp\cmp.alg\partial_order.pass.cpp
language.support\cmp\cmp.alg\strong_order.pass.cpp
language.support\cmp\cmp.alg\weak_order.pass.cpp


# *** CRT BUGS ***
# We're permanently missing aligned_alloc().
depr\depr.c.headers\stdlib_h.aligned_alloc.compile.pass.cpp
language.support\support.runtime\cstdlib.aligned_alloc.compile.pass.cpp

# OS-11107628 "_Exit allows cleanup in other DLLs"
thread\thread.threads\thread.thread.class\thread.thread.assign\move2.pass.cpp
thread\thread.threads\thread.thread.class\thread.thread.member\join.pass.cpp

# OS-29877133 "LDBL_DECIMAL_DIG missing from <float.h>"
depr\depr.c.headers\float_h.pass.cpp
language.support\support.limits\c.limits\cfloat.pass.cpp


# *** LIKELY BOGUS TESTS ***
# pass lambda without noexcept to barrier
thread\thread.barrier\completion.pass.cpp
thread\thread.barrier\max.pass.cpp

# Test bug after LWG-2899 "is_(nothrow_)move_constructible and tuple, optional and unique_ptr" was accepted.
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.asgn\move_convert.pass.cpp
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.asgn\move_convert.runtime.pass.cpp
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.asgn\move_convert.single.pass.cpp
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.asgn\move.pass.cpp

# Test bug after LWG-3257 "Missing feature testing macro update from P0858" was accepted.
language.support\support.limits\support.limits.general\string.version.pass.cpp

# Not yet analyzed, likely bogus tests. Appears to be timing assumptions.
atomics\atomics.types.operations\atomics.types.operations.wait\atomic_notify_all.pass.cpp
thread\futures\futures.async\async.pass.cpp
thread\futures\futures.shared_future\get.pass.cpp
thread\futures\futures.shared_future\wait.pass.cpp
thread\futures\futures.shared_future\wait_for.pass.cpp
thread\futures\futures.shared_future\wait_until.pass.cpp
thread\futures\futures.unique_future\get.pass.cpp
thread\futures\futures.unique_future\wait.pass.cpp
thread\futures\futures.unique_future\wait_for.pass.cpp
thread\thread.condition\thread.condition.condvar\notify_all.pass.cpp
thread\thread.condition\thread.condition.condvar\notify_one.pass.cpp
thread\thread.condition\thread.condition.condvar\wait_for_pred.pass.cpp
thread\thread.condition\thread.condition.condvar\wait_for.pass.cpp
thread\thread.condition\thread.condition.condvar\wait_until_pred.pass.cpp
thread\thread.condition\thread.condition.condvar\wait_until.pass.cpp
thread\thread.condition\thread.condition.condvarany\notify_all.pass.cpp
thread\thread.condition\thread.condition.condvarany\notify_one.pass.cpp
thread\thread.condition\thread.condition.condvarany\wait_for_pred.pass.cpp
thread\thread.condition\thread.condition.condvarany\wait_for.pass.cpp
thread\thread.condition\thread.condition.condvarany\wait_until_pred.pass.cpp
thread\thread.condition\thread.condition.condvarany\wait_until.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.guard\adopt_lock.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.guard\mutex.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.shared\thread.lock.shared.cons\mutex_duration.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.shared\thread.lock.shared.cons\mutex_time_point.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.shared\thread.lock.shared.cons\mutex_try_to_lock.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.shared\thread.lock.shared.cons\mutex.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.shared\thread.lock.shared.locking\lock.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.unique\thread.lock.unique.cons\mutex_duration.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.unique\thread.lock.unique.cons\mutex_time_point.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.unique\thread.lock.unique.cons\mutex_try_to_lock.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.unique\thread.lock.unique.cons\mutex.pass.cpp
thread\thread.mutex\thread.lock\thread.lock.unique\thread.lock.unique.locking\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.mutex.requirements.mutex\thread.mutex.class\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.mutex.requirements.mutex\thread.mutex.class\try_lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.mutex.requirements.mutex\thread.mutex.recursive\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.mutex.requirements.mutex\thread.mutex.recursive\try_lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.shared_mutex.requirements\thread.shared_mutex.class\lock_shared.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.shared_mutex.requirements\thread.shared_mutex.class\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.shared_mutex.requirements\thread.shared_mutex.class\try_lock_shared.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.shared_mutex.requirements\thread.shared_mutex.class\try_lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\lock_shared.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock_for.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock_shared_for.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock_shared_until.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock_shared.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock_until.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.sharedtimedmutex.requirements\thread.sharedtimedmutex.class\try_lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.class\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.class\try_lock_for.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.class\try_lock_until.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.class\try_lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.recursive\lock.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.recursive\try_lock_for.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.recursive\try_lock_until.pass.cpp
thread\thread.mutex\thread.mutex.requirements\thread.timedmutex.requirements\thread.timedmutex.recursive\try_lock.pass.cpp
thread\thread.threads\thread.thread.class\thread.thread.destr\dtor.pass.cpp
thread\thread.threads\thread.thread.class\thread.thread.member\detach.pass.cpp
thread\thread.threads\thread.thread.this\sleep_until.pass.cpp

# Not yet analyzed, likely bogus tests. Various assertions, probably POSIX assumptions.
diagnostics\syserr\syserr.compare\eq_error_code_error_code.pass.cpp
diagnostics\syserr\syserr.errcat\syserr.errcat.derived\message.pass.cpp
diagnostics\syserr\syserr.errcat\syserr.errcat.objects\system_category.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_error_code_const_char_pointer.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_error_code_string.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_error_code.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_int_error_category_const_char_pointer.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_int_error_category_string.pass.cpp
diagnostics\syserr\syserr.syserr\syserr.syserr.members\ctor_int_error_category.pass.cpp

# libc++ disagrees with libstdc++ and MSVC on whether setstate calls during I/O that throw set failbit; see open issue LWG-2349
input.output\iostream.format\input.streams\istream.unformatted\get_pointer_size_chart.pass.cpp
input.output\iostream.format\input.streams\istream.unformatted\get_pointer_size.pass.cpp

# Sensitive to implementation details. Assertion failed: test_alloc_base::count == expected_num_allocs
containers\container.requirements\container.requirements.general\allocator_move.pass.cpp

# Comment: "Test C99 compound literal."
# Code: `(int[]){3, 4}`
# error C4576: a parenthesized type followed by an initializer list is a non-standard explicit type conversion syntax
containers\sequences\array\array.creation\to_array.pass.cpp

# Tests emit warning C4244: 'argument': conversion from 'T' to 'const std::complex<double>::_Ty', possible loss of data
numerics\complex.number\cmplx.over\conj.pass.cpp
numerics\complex.number\cmplx.over\pow.pass.cpp
numerics\complex.number\cmplx.over\proj.pass.cpp

# Assertion failed: c == NaN || c == non_zero_nan
# Testing input values outside the range of [complex.value.ops]/9
# libc++ handles those input values differently
numerics\complex.number\complex.value.ops\polar.pass.cpp

# Assertion failed: std::abs(skew - x_skew) < 0.01
# Random number generation test with too strict pass criteria (test8 failure probability ~= 0.04)
numerics\rand\rand.dis\rand.dist.samp\rand.dist.samp.pconst\eval.pass.cpp

# Assertion failed: std::abs(f(u[i], a, m, bk, c) - double(i)/N) < .001
# Random number generation test with too strict pass criteria (test6 failure probability > 0.2)
numerics\rand\rand.dis\rand.dist.samp\rand.dist.samp.plinear\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.samp\rand.dist.samp.plinear\eval.pass.cpp

# Assertion failed: invalid min and max arguments for uniform_real
# `param_type p(5);` is a precondition violation.
numerics\rand\rand.dis\rand.dist.uni\rand.dist.uni.real\param_ctor.pass.cpp

# Assertion failed: invalid beta argument for gamma_distribution
# test4() constructs a negative_binomial_distribution from (40, 1); [rand.dist.bern.negbin] says p == 1 generates undefined probabilities.
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.negbin\eval.pass.cpp

# Assertion failed: (std::lerp(T(2.3), T(2.3), inf) == T(2.3))
# Asserts `(std::lerp(T(2.3), T(2.3), inf) == T(2.3))` and `std::isnan(std::lerp(T( 0), T( 0), inf))`
# They shouldn't behave differently. Both of them should probably return NaN.
numerics\c.math\lerp.pass.cpp

# --month{14} should be 1, not 13 as the test expects
utilities\time\time.cal\time.cal.month\time.cal.month.members\decrement.pass.cpp

# conversion from '__int64' to 'long', possible loss of data
utilities\time\time.hms\time.hms.members\seconds.pass.cpp
utilities\time\time.hms\time.hms.members\subseconds.pass.cpp

# Bogus test passes a class type as the second argument to std::advance
iterators\iterator.primitives\iterator.operations\robust_against_adl.pass.cpp

# Non-Standard assumption that std::filesystem::file_time_type::duration::period is std::nano
input.output\filesystems\fs.filesystem.synopsis\file_time_type_resolution.compile.pass.cpp

# P1614R2 "Adding Spaceship <=> To The Library" makes `std::operator!=(i1, i3)` an error
iterators\stream.iterators\istream.iterator\istream.iterator.ops\equal.pass.cpp

# Uses-allocator class constructor wants non-const allocator ref and mismatched piecewise_construct's value category
utilities\allocator.adaptor\allocator.adaptor.members\construct.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_pair.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_pair_const_lvalue_pair.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_pair_piecewise.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_pair_rvalue.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_pair_values.pass.cpp
utilities\allocator.adaptor\allocator.adaptor.members\construct_type.pass.cpp

# Tests ignore the return value of sto{meow}, triggering nodiscard warnings
strings\string.conversions\stod.pass.cpp
strings\string.conversions\stof.pass.cpp
strings\string.conversions\stoi.pass.cpp
strings\string.conversions\stol.pass.cpp
strings\string.conversions\stold.pass.cpp
strings\string.conversions\stoll.pass.cpp
strings\string.conversions\stoul.pass.cpp
strings\string.conversions\stoull.pass.cpp

# We define __cpp_lib_has_unique_object_representations in C++17 mode; test error says it
# "should not be defined when TEST_HAS_BUILTIN_IDENTIFIER(__has_unique_object_representations) || TEST_GCC_VER >= 700 is not defined!"
language.support\support.limits\support.limits.general\type_traits.version.pass.cpp

# Tests expect __cpp_lib_ranges to have the old value 201811L for P0896R4; we define the C++20 value 201911L for P1716R3.
language.support\support.limits\support.limits.general\algorithm.version.pass.cpp
language.support\support.limits\support.limits.general\functional.version.pass.cpp
language.support\support.limits\support.limits.general\iterator.version.pass.cpp

# Test expects __cpp_lib_chrono to have the old value 201611L for P0505R0; we define the C++20 value 201907L for P1466R3.
language.support\support.limits\support.limits.general\chrono.version.pass.cpp

# We unconditionally define __cpp_lib_addressof_constexpr; test error says it
# "should not be defined when TEST_HAS_BUILTIN(__builtin_addressof) || TEST_GCC_VER >= 700 is not defined!"
language.support\support.limits\support.limits.general\memory.version.pass.cpp

# libc++ doesn't implement P2231R1 Add further constexpr support for optional/variant
language.support\support.limits\support.limits.general\variant.version.pass.cpp

# Tests non-portable behavior
utilities\format\format.formatter\format.context\format.context\advance_to.pass.cpp
utilities\format\format.formatter\format.context\format.context\arg.pass.cpp
utilities\format\format.formatter\format.context\format.context\ctor.pass.cpp
utilities\format\format.formatter\format.context\format.context\locale.pass.cpp
utilities\format\format.formatter\format.context\format.context\out.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.bool.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.c_string.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.char.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.const_char_array.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.signed_integral.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.string.pass.cpp
utilities\format\format.formatter\format.context\format.formatter.spec\formatter.unsigned_integral.pass.cpp

# libc++ doesn't yet implement P2216R3 (test uses non-constant-expression format strings)
utilities\format\format.functions\format.pass.cpp
utilities\format\format.functions\format.locale.pass.cpp
utilities\format\format.functions\format_to.locale.pass.cpp
utilities\format\format.functions\format_to.pass.cpp
utilities\format\format.functions\format_to_n.pass.cpp
utilities\format\format.functions\format_to_n.locale.pass.cpp
utilities\format\format.functions\formatted_size.pass.cpp
utilities\format\format.functions\formatted_size.locale.pass.cpp
utilities\format\format.functions\locale-specific_form.pass.cpp

# libc++ chose option A for [time.clock.file.members], and we chose option B.
utilities\time\time.clock\time.clock.file\to_from_sys.pass.cpp

# libc++ is missing various Ranges DRs
language.support\support.limits\support.limits.general\ranges.version.pass.cpp

# test compares singular and non-singular string iterators
strings\basic.string\string.iterators\iterators.pass.cpp

# test compares iterators into distinct `array`s
ranges\range.adaptors\range.all\range.owning.view\begin_end.pass.cpp

# libc++ allows some forbidden unique_ptr conversions
utilities\memory\util.smartptr\util.smartptr.shared\util.smartptr.shared.assign\unique_ptr_Y.pass.cpp
utilities\memory\util.smartptr\util.smartptr.shared\util.smartptr.shared.const\unique_ptr.pass.cpp

# non-portable test of strengthened noexcept
ranges\range.adaptors\range.drop\ctor.default.pass.cpp
ranges\range.adaptors\range.transform\iterator\subscript.pass.cpp
ranges\range.utility\view.interface\view.interface.pass.cpp

# tests invalid range
utilities\memory\specialized.algorithms\uninitialized.copy\ranges_uninitialized_copy.pass.cpp
utilities\memory\specialized.algorithms\uninitialized.move\ranges_uninitialized_move.pass.cpp

# Narrowing conversion
utilities\memory\specialized.algorithms\uninitialized.copy\ranges_uninitialized_copy_n.pass.cpp
utilities\memory\specialized.algorithms\uninitialized.move\ranges_uninitialized_move_n.pass.cpp

# <charconv> test defines std::_Bit_cast, which we already have
utilities\charconv\charconv.msvc\test.pass.cpp

# libc++ doesn't yet implement LWG-3533
ranges\range.adaptors\range.transform\end.pass.cpp
ranges\range.adaptors\range.transform\iterator\base.pass.cpp

# MaybePOCCAAllocator doesn't meet the allocator requirements
containers\sequences\vector\vector.cons\assign_copy.pass.cpp

# Mismatching allocator value_type
containers\sequences\vector.bool\get_allocator.pass.cpp

# compares iterators from distinct transform_views
ranges\range.adaptors\range.transform\iterator\plus_minus.pass.cpp

# MoveOnlyForwardIterator (a misnomer) has mixed-type comparisons and conversions
ranges\range.utility\range.subrange\primitives.pass.cpp

# libc++ speculatively implements LWG-3645
strings\basic.string\string.capacity\resize_and_overwrite.pass.cpp

# libc++ is missing various <format> DRs
language.support\support.limits\support.limits.general\format.version.pass.cpp

# We speculatively implement LWG-3670
ranges\range.factories\range.iota.view\iterator\member_typedefs.compile.pass.cpp


# *** LIKELY STL BUGS ***
# Not yet analyzed, likely STL bugs. Various assertions.
re\re.alg\re.alg.match\awk.pass.cpp
re\re.alg\re.alg.match\basic.pass.cpp
re\re.alg\re.alg.match\ecma.pass.cpp
re\re.alg\re.alg.match\extended.pass.cpp
re\re.alg\re.alg.search\awk.pass.cpp
re\re.alg\re.alg.search\basic.pass.cpp
re\re.alg\re.alg.search\ecma.pass.cpp
re\re.alg\re.alg.search\extended.pass.cpp
re\re.alg\re.alg.search\no_update_pos.pass.cpp
re\re.badexp\regex_error.pass.cpp
re\re.const\re.synopt\syntax_option_type.pass.cpp
re\re.grammar\excessive_brace_count.pass.cpp
re\re.regex\re.regex.construct\bad_backref.pass.cpp
re\re.regex\re.regex.construct\bad_escape.pass.cpp
re\re.regex\re.regex.construct\bad_range.pass.cpp
re\re.regex\re.regex.construct\default.pass.cpp
re\re.regex\re.regex.nonmemb\re.regex.nmswap\swap.pass.cpp
re\re.regex\re.regex.swap\swap.pass.cpp
re\re.traits\lookup_collatename.pass.cpp
re\re.traits\transform_primary.pass.cpp

# Not yet analyzed, likely STL bugs. Various assertions.
numerics\complex.number\complex.member.ops\divide_equal_complex.pass.cpp
numerics\complex.number\complex.ops\complex_divide_complex.pass.cpp
numerics\complex.number\complex.ops\complex_times_complex.pass.cpp
numerics\complex.number\complex.ops\scalar_divide_complex.pass.cpp
numerics\complex.number\complex.transcendentals\acos.pass.cpp
numerics\complex.number\complex.transcendentals\acosh.pass.cpp
numerics\complex.number\complex.transcendentals\asin.pass.cpp
numerics\complex.number\complex.transcendentals\asinh.pass.cpp
numerics\complex.number\complex.transcendentals\atanh.pass.cpp
numerics\complex.number\complex.transcendentals\cos.pass.cpp
numerics\complex.number\complex.transcendentals\cosh.pass.cpp
numerics\complex.number\complex.transcendentals\log10.pass.cpp
numerics\complex.number\complex.transcendentals\pow_complex_complex.pass.cpp
numerics\complex.number\complex.transcendentals\pow_complex_scalar.pass.cpp
numerics\complex.number\complex.transcendentals\pow_scalar_complex.pass.cpp
numerics\complex.number\complex.transcendentals\sin.pass.cpp
numerics\complex.number\complex.transcendentals\sinh.pass.cpp
numerics\complex.number\complex.transcendentals\tanh.pass.cpp
numerics\complex.number\complex.value.ops\norm.pass.cpp

# Not yet analyzed, likely STL bugs. Many various assertions.
localization\locale.categories\category.ctype\facet.ctype.special\facet.ctype.char.statics\classic_table.pass.cpp
localization\locale.categories\category.monetary\locale.money.get\locale.money.get.members\get_long_double_en_US.pass.cpp
localization\locale.categories\category.monetary\locale.money.get\locale.money.get.members\get_long_double_fr_FR.pass.cpp
localization\locale.categories\category.monetary\locale.money.get\locale.money.get.members\get_long_double_ru_RU.pass.cpp
localization\locale.categories\category.monetary\locale.money.get\locale.money.get.members\get_long_double_zh_CN.pass.cpp
localization\locale.categories\category.monetary\locale.money.get\locale.money.get.members\get_string_en_US.pass.cpp
localization\locale.categories\category.monetary\locale.money.put\locale.money.put.members\put_long_double_en_US.pass.cpp
localization\locale.categories\category.monetary\locale.money.put\locale.money.put.members\put_long_double_fr_FR.pass.cpp
localization\locale.categories\category.monetary\locale.money.put\locale.money.put.members\put_long_double_ru_RU.pass.cpp
localization\locale.categories\category.monetary\locale.money.put\locale.money.put.members\put_long_double_zh_CN.pass.cpp
localization\locale.categories\category.monetary\locale.money.put\locale.money.put.members\put_string_en_US.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct\locale.moneypunct.members\decimal_point.pass.cpp
localization\locale.categories\category.monetary\locale.moneypunct\locale.moneypunct.members\thousands_sep.pass.cpp
localization\locale.categories\category.numeric\locale.nm.put\facet.num.put.members\put_double.pass.cpp
localization\locale.categories\category.numeric\locale.nm.put\facet.num.put.members\put_long_double.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_monthname_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_monthname.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_one.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_time_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_time.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_weekday_wide.pass.cpp
localization\locale.categories\category.time\locale.time.get\locale.time.get.members\get_weekday.pass.cpp
localization\locale.categories\category.time\locale.time.put\locale.time.put.members\put2.pass.cpp
localization\locale.stdcvt\codecvt_utf16_in.pass.cpp
localization\locale.stdcvt\codecvt_utf16_length.pass.cpp
localization\locale.stdcvt\codecvt_utf16_max_length.pass.cpp
localization\locale.stdcvt\codecvt_utf16_out.pass.cpp
localization\locale.stdcvt\codecvt_utf16.pass.cpp
localization\locale.stdcvt\codecvt_utf8_in.pass.cpp
localization\locale.stdcvt\codecvt_utf8_length.pass.cpp
localization\locale.stdcvt\codecvt_utf8_max_length.pass.cpp
localization\locale.stdcvt\codecvt_utf8_out.pass.cpp
localization\locale.stdcvt\codecvt_utf8_utf16_in.pass.cpp
localization\locale.stdcvt\codecvt_utf8_utf16_length.pass.cpp
localization\locale.stdcvt\codecvt_utf8_utf16_max_length.pass.cpp
localization\locale.stdcvt\codecvt_utf8_utf16_out.pass.cpp
localization\locale.stdcvt\codecvt_utf8.pass.cpp
localization\locales\locale.convenience\conversions\conversions.buffer\overflow.pass.cpp
localization\locales\locale.convenience\conversions\conversions.buffer\pbackfail.pass.cpp
localization\locales\locale.convenience\conversions\conversions.buffer\underflow.pass.cpp
localization\locales\locale.convenience\conversions\conversions.string\ctor_err_string.pass.cpp

# Not yet analyzed, likely STL bugs. Various assertions.
input.output\iostream.format\ext.manip\get_money.pass.cpp
input.output\iostream.format\ext.manip\put_money.pass.cpp
input.output\iostreams.base\ios\basic.ios.members\copyfmt.pass.cpp

# Likely STL bug: Looks like we shouldn't be using assignment.
thread\futures\futures.promise\set_rvalue.pass.cpp

# Possible STL bugs in pair and tuple.
utilities\tuple\tuple.tuple\tuple.cnstr\PR23256_constrain_UTypes_ctor.pass.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\PR31384.pass.cpp

# Bugs/questionable choices in codecvt<char(16|32)_t, char, mbstate_t>, which we probably will not fix since
# (1) they are deprecated, and (2) we don't want to break existing users.
localization\locale.categories\category.ctype\locale.codecvt\locale.codecvt.members\char16_t_max_length.pass.cpp
localization\locale.categories\category.ctype\locale.codecvt\locale.codecvt.members\char16_t_unshift.pass.cpp
localization\locale.categories\category.ctype\locale.codecvt\locale.codecvt.members\char32_t_encoding.pass.cpp
localization\locale.categories\category.ctype\locale.codecvt\locale.codecvt.members\char32_t_max_length.pass.cpp

# Likely STL bug in <chrono>: "result type of conditional expression is ambiguous"
utilities\time\time.duration\time.duration.alg\abs.pass.cpp

# Likely STL bug in <format>: we check argument ids at compiletime in next_arg_id
utilities\format\format.formatter\format.parse.ctx\next_arg_id.pass.cpp

# Likely STL bug in `bind_front`: we don't respect deletion of the target call operator
utilities\function.objects\func.bind_front\bind_front.pass.cpp

# Likely STL bug in `join_view::_Iterator`: constexpr weirdness
ranges\range.adaptors\range.join.view\end.pass.cpp
ranges\range.adaptors\range.join.view\iterator\decrement.pass.cpp
ranges\range.adaptors\range.join.view\iterator\increment.pass.cpp
ranges\range.adaptors\range.join.view\iterator\iter.swap.pass.cpp
ranges\range.adaptors\range.join.view\iterator\star.pass.cpp
ranges\range.adaptors\range.join.view\sentinel\ctor.parent.pass.cpp
ranges\range.adaptors\range.join.view\sentinel\eq.pass.cpp


# *** NOT YET ANALYZED ***
# Not yet analyzed. Asserting about alloc_count.
thread\futures\futures.promise\alloc_ctor.pass.cpp
thread\futures\futures.promise\move_assign.pass.cpp
thread\futures\futures.promise\move_ctor.pass.cpp
thread\futures\futures.promise\swap.pass.cpp
thread\futures\futures.shared_future\dtor.pass.cpp
thread\futures\futures.unique_future\dtor.pass.cpp

# Not yet analyzed. libc++ seems to have a different opinion about what tuple_size<const void> should do.
utilities\tuple\tuple.tuple\tuple.helper\tuple_size_incomplete.pass.cpp
utilities\tuple\tuple.tuple\tuple.helper\tuple_size_structured_bindings.pass.cpp

# Not yet analyzed. Possibly testing nonstandard deduction guides.
containers\associative\map\map.cons\deduct.pass.cpp
containers\associative\map\map.cons\deduct_const.pass.cpp
containers\associative\multimap\multimap.cons\deduct.pass.cpp
containers\associative\multimap\multimap.cons\deduct_const.pass.cpp
containers\container.adaptors\priority.queue\priqueue.cons\deduct.pass.cpp
containers\sequences\list\list.cons\deduct.pass.cpp
containers\unord\unord.map\unord.map.cnstr\deduct.pass.cpp
containers\unord\unord.map\unord.map.cnstr\deduct_const.pass.cpp
containers\unord\unord.multimap\unord.multimap.cnstr\deduct.pass.cpp
containers\unord\unord.multimap\unord.multimap.cnstr\deduct_const.pass.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\deduct.pass.cpp

# Not yet analyzed. Frequent timeouts
containers\sequences\deque\deque.modifiers\insert_iter_iter.pass.cpp

# Not yet analyzed. Failing after https://reviews.llvm.org/D75622.
re\re.const\re.matchflag\match_prev_avail.pass.cpp

# Not yet analyzed. Many diagnostics.
input.output\filesystems\class.path\path.member\path.charconv.pass.cpp

# Not yet analyzed. Probably ADL shenanigans.
algorithms\robust_against_adl.compile.pass.cpp
strings\basic.string\string.modifiers\robust_against_adl.pass.cpp
thread\thread.threads\thread.thread.class\thread.thread.constr\robust_against_adl.pass.cpp
utilities\function.objects\func.wrap\func.wrap.func\robust_against_adl.pass.cpp
utilities\function.objects\refwrap\refwrap.invoke\robust_against_adl.pass.cpp
utilities\variant\variant.visit\robust_against_adl.pass.cpp

# Not yet analyzed. Possibly C1XX constexpr bug.
utilities\function.objects\func.invoke\invoke_constexpr.pass.cpp

# Not yet analyzed. Failing for "[a[.ch.]z]".
re\re.alg\re.alg.match\awk.locale.pass.cpp
re\re.alg\re.alg.match\basic.locale.pass.cpp
re\re.alg\re.alg.match\ecma.locale.pass.cpp
re\re.alg\re.alg.match\extended.locale.pass.cpp
re\re.alg\re.alg.search\awk.locale.pass.cpp
re\re.alg\re.alg.search\basic.locale.pass.cpp
re\re.alg\re.alg.search\ecma.locale.pass.cpp
re\re.alg\re.alg.search\extended.locale.pass.cpp

# Not yet analyzed. Various static_asserts.
utilities\variant\variant.variant\variant.assign\conv.pass.cpp
utilities\variant\variant.variant\variant.assign\T.pass.cpp
utilities\variant\variant.variant\variant.ctor\conv.pass.cpp
utilities\variant\variant.variant\variant.ctor\T.pass.cpp

# Not yet analyzed. Involves incomplete types.
utilities\memory\allocator.traits\allocator.traits.members\construct.pass.cpp
utilities\memory\allocator.traits\allocator.traits.members\destroy.pass.cpp

# Not yet analyzed. Error mentions allocator<const T>.
utilities\memory\specialized.algorithms\specialized.construct\construct_at.pass.cpp

# Not yet analyzed. Looks like deduction guide SFINAE failure.
containers\sequences\deque\deque.cons\deduct.pass.cpp
containers\sequences\forwardlist\forwardlist.cons\deduct.pass.cpp
containers\sequences\vector\vector.cons\deduct.pass.cpp

# Not yet analyzed. Seems to force a sign conversion error?
iterators\iterator.primitives\iterator.operations\advance.pass.cpp

# Not yet analyzed. Maybe Clang over-eagerly instantiating noexcept-specifier?
utilities\memory\unique.ptr\iterator_concept_conformance.compile.pass.cpp

# Not yet analyzed. Assertion failed: std::abs((kurtosis - x_kurtosis) / x_kurtosis) < VARIOUS_VALUES
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.bin\eval.PR44847.pass.cpp
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.geo\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.geo\eval.pass.cpp
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.negbin\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.norm\rand.dist.norm.lognormal\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.norm\rand.dist.norm.lognormal\eval.pass.cpp
numerics\rand\rand.dis\rand.dist.norm\rand.dist.norm.t\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.norm\rand.dist.norm.t\eval.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.extreme\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.extreme\eval.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.gamma\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.gamma\eval.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.poisson\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.pois\rand.dist.pois.poisson\eval.pass.cpp

# Not yet analyzed. Assertion failed: std::abs((skew - x_skew) / x_skew) < 0.01
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.bin\eval_param.pass.cpp
numerics\rand\rand.dis\rand.dist.bern\rand.dist.bern.bin\eval.pass.cpp


# *** SKIPPED FOR MSVC-INTERNAL CONTEST ONLY ***
# "XFAIL: msvc" or "XFAIL: clang"
algorithms\algorithms.results\in_out_result.compile.pass.cpp
algorithms\algorithms.results\no_unique_address.compile.pass.cpp
utilities\function.objects\func.wrap\func.wrap.func\noncopyable_return_type.pass.cpp

# Contest doesn't understand compile-only `.compile.pass.cpp` tests. Tests with a stub `main` are
# fine, but tests with no `main` function are effectively GitHub-only.
algorithms\robust_against_adl.compile.pass.cpp
algorithms\robust_re_difference_type.compile.pass.cpp
atomics\atomics.types.generic\constexpr_noexcept.compile.pass.cpp
concepts\concepts.callable\concept.equiv\equivalence_relation.compile.pass.cpp
concepts\concepts.callable\concept.equiv\equivalence_relation.subsumption.compile.pass.cpp
concepts\concepts.callable\concept.invocable\invocable.compile.pass.cpp
concepts\concepts.callable\concept.predicate\predicate.compile.pass.cpp
concepts\concepts.callable\concept.predicate\predicate.subsumption.compile.pass.cpp
concepts\concepts.callable\concept.regularinvocable\regular_invocable.compile.pass.cpp
concepts\concepts.callable\concept.relation\relation.compile.pass.cpp
concepts\concepts.callable\concept.relation\relation.subsumption.compile.pass.cpp
concepts\concepts.callable\concept.strictweakorder\strict_weak_order.compile.pass.cpp
concepts\concepts.callable\concept.strictweakorder\strict_weak_order.subsumption.compile.pass.cpp
concepts\concepts.lang\concept.assignable\assignable_from.compile.pass.cpp
concepts\concepts.lang\concept.swappable\swappable_with.compile.pass.cpp
containers\associative\map\iterator_concept_conformance.compile.pass.cpp
containers\associative\map\map.cons\copy_assign.addressof.compile.pass.cpp
containers\associative\map\range_concept_conformance.compile.pass.cpp
containers\associative\multimap\iterator_concept_conformance.compile.pass.cpp
containers\associative\multimap\multimap.cons\copy_assign.addressof.compile.pass.cpp
containers\associative\multimap\range_concept_conformance.compile.pass.cpp
containers\associative\multiset\iterator_concept_conformance.compile.pass.cpp
containers\associative\multiset\multiset.cons\copy_assign.addressof.compile.pass.cpp
containers\associative\multiset\range_concept_conformance.compile.pass.cpp
containers\associative\set\iterator_concept_conformance.compile.pass.cpp
containers\associative\set\range_concept_conformance.compile.pass.cpp
containers\associative\set\set.cons\copy_assign.addressof.compile.pass.cpp
containers\container.adaptors\priority.queue\priqueue.cons\assign_copy.addressof.compile.pass.cpp
containers\container.adaptors\priority.queue\priqueue.cons\ctor_iter_constraint.compile.pass.cpp
containers\container.adaptors\queue\queue.defn\assign_copy.addressof.compile.pass.cpp
containers\iterator.rel_ops.compile.pass.cpp
containers\sequences\array\array.cons\implicit_copy.addressof.compile.pass.cpp
containers\sequences\array\iterator_concept_conformance.compile.pass.cpp
containers\sequences\array\range_concept_conformance.compile.pass.cpp
containers\sequences\deque\deque.cons\move_assign.addressof.compile.pass.cpp
containers\sequences\deque\iterator_concept_conformance.compile.pass.cpp
containers\sequences\deque\range_concept_conformance.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.cons\assign_copy.addressof.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.iter\iterator_concept_conformance.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.ops\merge_lvalue_pred.addressof.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.ops\merge_lvalue.addressof.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.ops\merge_rvalue_pred.addressof.compile.pass.cpp
containers\sequences\forwardlist\forwardlist.ops\merge_rvalue.addressof.compile.pass.cpp
containers\sequences\forwardlist\range_concept_conformance.compile.pass.cpp
containers\sequences\list\iterator_concept_conformance.compile.pass.cpp
containers\sequences\list\list.cons\assign_copy.addressof.compile.pass.cpp
containers\sequences\list\list.cons\assign_move.addressof.compile.pass.cpp
containers\sequences\list\list.modifiers\emplace.addressof.compile.pass.cpp
containers\sequences\list\list.modifiers\erase_iter.addressof.compile.pass.cpp
containers\sequences\list\list.modifiers\insert_iter_rvalue.addressof.compile.pass.cpp
containers\sequences\list\list.modifiers\insert_iter_size_value.addressof.compile.pass.cpp
containers\sequences\list\list.modifiers\insert_iter_value.addressof.compile.pass.cpp
containers\sequences\list\list.ops\merge_comp.addressof.compile.pass.cpp
containers\sequences\list\list.ops\splice_pos_list_iter_iter.addressof.compile.pass.cpp
containers\sequences\list\list.ops\splice_pos_list_iter.addressof.compile.pass.cpp
containers\sequences\list\list.special\swap.addressof.compile.pass.cpp
containers\sequences\list\range_concept_conformance.compile.pass.cpp
containers\sequences\vector.bool\iterator_concept_conformance.compile.pass.cpp
containers\sequences\vector.bool\range_concept_conformance.compile.pass.cpp
containers\sequences\vector\iterator_concept_conformance.compile.pass.cpp
containers\sequences\vector\range_concept_conformance.compile.pass.cpp
containers\sequences\vector\vector.cons\assign_copy.addressof.compile.pass.cpp
containers\sequences\vector\vector.cons\assign_move.addressof.compile.pass.cpp
containers\sequences\vector\vector.cons\move.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\emplace.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\erase_iter_iter.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\erase_iter.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\insert_iter_iter_iter.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\insert_iter_rvalue.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\insert_iter_size_value.addressof.compile.pass.cpp
containers\sequences\vector\vector.modifiers\insert_iter_value.addressof.compile.pass.cpp
containers\sequences\vector\vector.special\swap.addressof.compile.pass.cpp
containers\unord\unord.map\iterator_concept_conformance.compile.pass.cpp
containers\unord\unord.map\range_concept_conformance.compile.pass.cpp
containers\unord\unord.map\unord.map.cnstr\assign_copy.addressof.compile.pass.cpp
containers\unord\unord.multimap\iterator_concept_conformance.compile.pass.cpp
containers\unord\unord.multimap\range_concept_conformance.compile.pass.cpp
containers\unord\unord.multimap\unord.multimap.cnstr\assign_copy.addressof.compile.pass.cpp
containers\unord\unord.multiset\iterator_concept_conformance.compile.pass.cpp
containers\unord\unord.multiset\range_concept_conformance.compile.pass.cpp
containers\unord\unord.multiset\unord.multiset.cnstr\assign_copy.addressof.compile.pass.cpp
containers\unord\unord.set\iterator_concept_conformance.compile.pass.cpp
containers\unord\unord.set\range_concept_conformance.compile.pass.cpp
containers\unord\unord.set\unord.set.cnstr\assign_copy.addressof.compile.pass.cpp
containers\views\enable_borrowed_range.compile.pass.cpp
containers\views\range_concept_conformance.compile.pass.cpp
containers\views\span.cons\span.dtor.compile.pass.cpp
containers\views\span.iterators\iterator_concept_conformance.compile.pass.cpp
containers\views\trivially_copyable.compile.pass.cpp
depr\depr.c.headers\stdlib_h.aligned_alloc.compile.pass.cpp
input.output\filesystems\class.directory_iterator\iterator_concept_conformance.compile.pass.cpp
input.output\filesystems\class.directory_iterator\range_concept_conformance.compile.pass.cpp
input.output\filesystems\class.path\range_concept_conformance.compile.pass.cpp
input.output\filesystems\class.rec.dir.itr\range_concept_conformance.compile.pass.cpp
input.output\filesystems\fs.filesystem.synopsis\enable_borrowed_range.compile.pass.cpp
input.output\filesystems\fs.filesystem.synopsis\enable_view.compile.pass.cpp
input.output\filesystems\fs.filesystem.synopsis\file_time_type_resolution.compile.pass.cpp
iterators\iterator.primitives\iterator.traits\cxx20_iterator_traits.compile.pass.cpp
iterators\iterator.primitives\iterator.traits\iter_reference_t.compile.pass.cpp
iterators\iterator.primitives\range.iter.ops\range.iter.ops.next\constraints.compile.pass.cpp
iterators\iterator.primitives\range.iter.ops\range.iter.ops.prev\constraints.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.move\indirectly_movable_storable.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.move\indirectly_movable_storable.subsumption.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.move\indirectly_movable.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.move\indirectly_movable.subsumption.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.swap\indirectly_swappable.compile.pass.cpp
iterators\iterator.requirements\alg.req.ind.swap\indirectly_swappable.subsumption.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirect_binary_predicate.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirect_equivalence_relation.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirect_result_t.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirect_strict_weak_order.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirect_unary_predicate.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirectly_comparable.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirectly_regular_unary_invocable.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\indirectinvocable\indirectly_unary_invocable.compile.pass.cpp
iterators\iterator.requirements\indirectcallable\projected\projected.compile.pass.cpp
iterators\iterator.requirements\iterator.assoc.types\incrementable.traits\incrementable_traits.compile.pass.cpp
iterators\iterator.requirements\iterator.assoc.types\incrementable.traits\iter_difference_t.compile.pass.cpp
iterators\iterator.requirements\iterator.assoc.types\readable.traits\indirectly_readable_traits.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.bidir\bidirectional_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.bidir\subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.forward\forward_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.forward\subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.inc\incrementable.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.inc\subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.input\input_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.input\subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.iterator\input_or_output_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.iterator\subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.output\output_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.random.access\contiguous_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.random.access\random_access_iterator.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.readable\indirectly_readable.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.readable\iter_common_reference_t.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.sentinel\sentinel_for.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.sentinel\sentinel_for.subsumption.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.sentinel\sized_sentinel_for.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.winc\weakly_incrementable.compile.pass.cpp
iterators\iterator.requirements\iterator.concepts\iterator.concept.writable\indirectly_writable.compile.pass.cpp
iterators\predef.iterators\counted.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\counted.iterator\iterator_traits.compile.pass.cpp
iterators\predef.iterators\counted.iterator\member_types.compile.pass.cpp
iterators\predef.iterators\insert.iterators\back.insert.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\insert.iterators\front.insert.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\insert.iterators\insert.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\iterators.common\iterator_traits.compile.pass.cpp
iterators\predef.iterators\move.iterators\move.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\predef.iterators\reverse.iterators\iterator_concept_conformance.compile.pass.cpp
iterators\stream.iterators\istream.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\stream.iterators\istreambuf.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\stream.iterators\ostream.iterator\iterator_concept_conformance.compile.pass.cpp
iterators\stream.iterators\ostreambuf.iterator\iterator_concept_conformance.compile.pass.cpp
language.support\cmp\cmp.concept\three_way_comparable_with.compile.pass.cpp
language.support\cmp\cmp.concept\three_way_comparable.compile.pass.cpp
language.support\cmp\cmp.result\compare_three_way_result.compile.pass.cpp
language.support\support.runtime\cstdlib.aligned_alloc.compile.pass.cpp
language.support\support.runtime\ctime.timespec.compile.pass.cpp
language.support\support.types\max_align_t.compile.pass.cpp
library\description\conventions\customization.point.object\cpo.compile.pass.cpp
numerics\bit\bit.cast\bit_cast.compile.pass.cpp
numerics\numarray\template.valarray\valarray.assign\value_assign.addressof.compile.pass.cpp
ranges\range.adaptors\range.all\all_t.compile.pass.cpp
ranges\range.adaptors\range.all\range.owning.view\borrowing.compile.pass.cpp
ranges\range.adaptors\range.common.view\borrowing.compile.pass.cpp
ranges\range.adaptors\range.common.view\ctad.compile.pass.cpp
ranges\range.adaptors\range.drop\ctad.compile.pass.cpp
ranges\range.adaptors\range.join.view\ctad.compile.pass.cpp
ranges\range.adaptors\range.join.view\iterator\member_types.compile.pass.cpp
ranges\range.adaptors\range.reverse\borrowing.compile.pass.cpp
ranges\range.adaptors\range.reverse\ctad.compile.pass.cpp
ranges\range.adaptors\range.reverse\range_concept_conformance.compile.pass.cpp
ranges\range.adaptors\range.take\borrowing.compile.pass.cpp
ranges\range.adaptors\range.take\ctad.compile.pass.cpp
ranges\range.adaptors\range.take\range_concept_conformance.compile.pass.cpp
ranges\range.adaptors\range.transform\ctad.compile.pass.cpp
ranges\range.adaptors\range.transform\iterator\requirements.compile.pass.cpp
ranges\range.factories\range.iota.view\borrowing.compile.pass.cpp
ranges\range.factories\range.iota.view\ctad.compile.pass.cpp
ranges\range.factories\range.iota.view\iterator\member_typedefs.compile.pass.cpp
ranges\range.factories\range.iota.view\range_concept_conformance.compile.pass.cpp
ranges\range.factories\range.iota.view\type.compile.pass.cpp
ranges\range.factories\range.single.view\ctad.compile.pass.cpp
ranges\range.factories\range.single.view\range_concept_conformance.compile.pass.cpp
ranges\range.req\range.range\borrowed_range.compile.pass.cpp
ranges\range.req\range.range\borrowed_range.subsumption.compile.pass.cpp
ranges\range.req\range.range\enable_borrowed_range.compile.pass.cpp
ranges\range.req\range.range\helper_aliases.compile.pass.cpp
ranges\range.req\range.range\iterator_t.compile.pass.cpp
ranges\range.req\range.range\range_size_t.compile.pass.cpp
ranges\range.req\range.range\range.compile.pass.cpp
ranges\range.req\range.range\sentinel_t.compile.pass.cpp
ranges\range.req\range.refinements\bidirectional_range.compile.pass.cpp
ranges\range.req\range.refinements\common_range.compile.pass.cpp
ranges\range.req\range.refinements\contiguous_range.compile.pass.cpp
ranges\range.req\range.refinements\forward_range.compile.pass.cpp
ranges\range.req\range.refinements\input_range.compile.pass.cpp
ranges\range.req\range.refinements\output_range.compile.pass.cpp
ranges\range.req\range.refinements\random_access_range.compile.pass.cpp
ranges\range.req\range.refinements\subsumption.compile.pass.cpp
ranges\range.req\range.refinements\viewable_range.compile.pass.cpp
ranges\range.req\range.sized\sized_range.compile.pass.cpp
ranges\range.req\range.sized\subsumption.compile.pass.cpp
ranges\range.req\range.view\enable_view.compile.pass.cpp
ranges\range.req\range.view\view_base.compile.pass.cpp
ranges\range.req\range.view\view.compile.pass.cpp
ranges\range.req\range.view\view.subsumption.compile.pass.cpp
ranges\range.utility\range.dangling\borrowed_iterator.compile.pass.cpp
ranges\range.utility\range.dangling\borrowed_subrange.compile.pass.cpp
ranges\range.utility\range.subrange\ctad.compile.pass.cpp
ranges\range.utility\range.subrange\enable_borrowed_range.compile.pass.cpp
ranges\range.utility\range.subrange\general.compile.pass.cpp
re\re.iter\re.regiter\iterator_concept_conformance.compile.pass.cpp
re\re.iter\re.tokiter\iterator_concept_conformance.compile.pass.cpp
re\re.results\range_concept_conformance.compile.pass.cpp
strings\basic.string\range_concept_conformance.compile.pass.cpp
strings\basic.string\string.cons\nullptr.compile.pass.cpp
strings\basic.string\string.iterators\iterator_concept_conformance.compile.pass.cpp
strings\string.view\enable_borrowed_range.compile.pass.cpp
strings\string.view\range_concept_conformance.compile.pass.cpp
strings\string.view\string.view.cons\nullptr.compile.pass.cpp
strings\string.view\string.view.io\stream_insert_decl_present.compile.pass.cpp
strings\string.view\string.view.iterators\iterator_concept_conformance.compile.pass.cpp
strings\string.view\trivially_copyable.compile.pass.cpp
thread\thread.semaphore\ctor.compile.pass.cpp
utilities\function.objects\comparisons\transparent_three_way.compile.pass.cpp
utilities\memory\default.allocator\PR50299.compile.pass.cpp
utilities\memory\storage.iterator\types.compile.pass.cpp
utilities\memory\unique.ptr\iterator_concept_conformance.compile.pass.cpp
utilities\memory\util.smartptr\util.smartptr.shared\iterator_concept_conformance.compile.pass.cpp
utilities\optional\iterator_concept_conformance.compile.pass.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\cnstr_with_any.compile.pass.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\empty_tuple_trivial.compile.pass.cpp
utilities\tuple\tuple.tuple\tuple.rel\size_incompatible_three_way.compile.pass.cpp

# .verify.cpp tests use clang-verify to validate warnings; GitHub knows not to run them,
# Contest must be told.
atomics\atomics.types.generic\trivially_copyable.verify.cpp
atomics\atomics.types.operations\atomics.types.operations.req\copy.assign.ptr.volatile.verify.cpp
atomics\atomics.types.operations\atomics.types.operations.req\copy.assign.volatile.verify.cpp
concepts\concepts.lang\concept.default.init\default_initializable.verify.cpp
containers\associative\map\map.access\empty.verify.cpp
containers\associative\multimap\empty.verify.cpp
containers\associative\multiset\empty.verify.cpp
containers\associative\set\empty.verify.cpp
containers\container.adaptors\priority.queue\priqueue.members\empty.verify.cpp
containers\container.adaptors\queue\queue.defn\empty.verify.cpp
containers\container.adaptors\stack\stack.defn\empty.verify.cpp
containers\container.node\node_handle.nodiscard.verify.cpp
containers\sequences\array\empty.verify.cpp
containers\sequences\deque\deque.capacity\empty.verify.cpp
containers\sequences\forwardlist\empty.verify.cpp
containers\sequences\list\list.capacity\empty.verify.cpp
containers\sequences\vector.bool\empty.verify.cpp
containers\sequences\vector\vector.capacity\empty.verify.cpp
containers\sequences\vector\vector.cons\copy.move_only.verify.cpp
containers\unord\unord.map\empty.verify.cpp
containers\unord\unord.multimap\empty.verify.cpp
containers\unord\unord.multiset\empty.verify.cpp
containers\unord\unord.set\empty.verify.cpp
containers\views\span.cons\iterator_len.verify.cpp
containers\views\span.cons\iterator_sentinel.verify.cpp
containers\views\span.obs\empty.nodiscard.verify.cpp
depr\depr.atomics\depr.atomics.nonmembers\atomic_init.depr_in_cxx20.verify.cpp
depr\depr.lib.binders\depr.lib.bind.1st\bind1st.depr_in_cxx11.verify.cpp
depr\depr.lib.binders\depr.lib.bind.2nd\bind2nd.depr_in_cxx11.verify.cpp
depr\depr.lib.binders\depr.lib.binder.1st\binder1st.depr_in_cxx11.verify.cpp
depr\depr.lib.binders\depr.lib.binder.2nd\binder2nd.depr_in_cxx11.verify.cpp
input.output\filesystems\class.path\path.member\path.decompose\empty.verify.cpp
input.output\iostream.format\input.streams\istream.rvalue\not_istreamable.verify.cpp
input.output\iostream.format\output.streams\ostream.rvalue\not_ostreamable.verify.cpp
input.output\iostream.format\quoted.manip\quoted_char.verify.cpp
input.output\iostream.format\quoted.manip\quoted_traits.verify.cpp
iterators\iterator.container\empty.array.verify.cpp
iterators\iterator.container\empty.container.verify.cpp
iterators\iterator.container\empty.initializer_list.verify.cpp
iterators\iterator.primitives\iterator.basic\deprecated.verify.cpp
iterators\iterator.primitives\range.iter.ops\range.iter.ops.advance\constraints.verify.cpp
iterators\iterator.requirements\iterator.cust\iterator.cust.move\iter_move.nodiscard.verify.cpp
iterators\predef.iterators\move.iterators\move.iter.ops\move.iter.op.const\ctor.convert.LWG3435.verify.cpp
iterators\predef.iterators\move.iterators\move.iter.ops\move.iter.op.const\ctor.iter.explicit.verify.cpp
iterators\predef.iterators\move.iterators\move.iter.ops\move.iter.op=\assign.LWG3435.verify.cpp
iterators\predef.iterators\reverse.iterators\reverse.iter.cons\assign.LWG3435.verify.cpp
iterators\predef.iterators\reverse.iterators\reverse.iter.cons\ctor.iter.explicit.verify.cpp
iterators\predef.iterators\reverse.iterators\reverse.iter.cons\ctor.reverse_iterator.LWG3435.verify.cpp
language.support\cmp\cmp.alg\strong_order_long_double.verify.cpp
language.support\cmp\cmp.categories.pre\zero_type.verify.cpp
language.support\support.dynamic\new.delete\new.delete.array\new_size_align_nothrow.verify.cpp
language.support\support.dynamic\new.delete\new.delete.array\new_size_align.verify.cpp
language.support\support.dynamic\new.delete\new.delete.array\new_size_nothrow.verify.cpp
language.support\support.dynamic\new.delete\new.delete.array\new_size.verify.cpp
language.support\support.dynamic\new.delete\new.delete.placement\new_array_ptr.verify.cpp
language.support\support.dynamic\new.delete\new.delete.placement\new_ptr.verify.cpp
language.support\support.dynamic\new.delete\new.delete.single\new_size_align_nothrow.verify.cpp
language.support\support.dynamic\new.delete\new.delete.single\new_size_align.verify.cpp
language.support\support.dynamic\new.delete\new.delete.single\new_size_nothrow.verify.cpp
language.support\support.dynamic\new.delete\new.delete.single\new_size.verify.cpp
language.support\support.dynamic\ptr.launder\launder.nodiscard.verify.cpp
localization\locale.categories\category.ctype\locale.codecvt.byname\codecvt_byname_char16_t_char.depr_in_cxx20.verify.cpp
localization\locale.categories\category.ctype\locale.codecvt.byname\codecvt_byname_char32_t_char.depr_in_cxx20.verify.cpp
localization\locale.categories\category.ctype\locale.codecvt\codecvt_char16_t_char.depr_in_cxx20.verify.cpp
localization\locale.categories\category.ctype\locale.codecvt\codecvt_char32_t_char.depr_in_cxx20.verify.cpp
numerics\c.math\abs.verify.cpp
numerics\numbers\illformed.verify.cpp
ranges\range.adaptors\range.join.view\ctad.verify.cpp
re\re.results\re.results.size\empty.verify.cpp
strings\basic.string.literals\literal.verify.cpp
strings\basic.string\string.capacity\empty.verify.cpp
strings\basic.string\string.capacity\reserve.deprecated_in_cxx20.verify.cpp
strings\string.view\string_view.literals\literal.verify.cpp
strings\string.view\string.view.capacity\empty.verify.cpp
thread\futures\futures.async\async.verify.cpp
thread\futures\futures.promise\copy_assign.verify.cpp
thread\futures\futures.promise\copy_ctor.verify.cpp
thread\futures\futures.unique_future\copy_assign.verify.cpp
thread\futures\futures.unique_future\copy_ctor.verify.cpp
utilities\allocator.adaptor\allocator.adaptor.members\allocate_size_hint.verify.cpp
utilities\allocator.adaptor\allocator.adaptor.members\allocate_size.verify.cpp
utilities\any\any.nonmembers\any.cast\const_correctness.verify.cpp
utilities\any\any.nonmembers\any.cast\not_copy_constructible.verify.cpp
utilities\format\format.formatter\format.parse.ctx\check_arg_id.verify.cpp
utilities\function.objects\func.bind_front\bind_front.verify.cpp
utilities\function.objects\func.wrap\func.wrap.func\func.wrap.func.con\alloc_F.verify.cpp
utilities\function.objects\func.wrap\func.wrap.func\func.wrap.func.con\alloc_function.verify.cpp
utilities\function.objects\func.wrap\func.wrap.func\func.wrap.func.con\alloc_nullptr.verify.cpp
utilities\function.objects\func.wrap\func.wrap.func\func.wrap.func.con\alloc_rfunction.verify.cpp
utilities\function.objects\func.wrap\func.wrap.func\func.wrap.func.con\alloc.verify.cpp
utilities\function.objects\negators\binary_negate.depr_in_cxx17.verify.cpp
utilities\function.objects\negators\not1.depr_in_cxx17.verify.cpp
utilities\function.objects\negators\not2.depr_in_cxx17.verify.cpp
utilities\function.objects\negators\unary_negate.depr_in_cxx17.verify.cpp
utilities\memory\allocator.traits\allocator.traits.members\allocate.verify.cpp
utilities\memory\default.allocator\allocator_types.deprecated_in_cxx17.verify.cpp
utilities\memory\default.allocator\allocator_types.removed_in_cxx20.verify.cpp
utilities\memory\default.allocator\allocator.members\allocate.constexpr.size.verify.cpp
utilities\memory\default.allocator\allocator.members\allocate.verify.cpp
utilities\memory\pointer.conversion\to_address_on_funcptr.verify.cpp
utilities\memory\pointer.conversion\to_address_on_function.verify.cpp
utilities\memory\storage.iterator\deprecated.verify.cpp
utilities\meta\meta.trans\meta.trans.other\result_of.deprecated.verify.cpp
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.observers\dereference.verify.cpp
utilities\smartptr\unique.ptr\unique.ptr.class\unique.ptr.observers\op_arrow.verify.cpp
utilities\tuple\tuple.tuple\tuple.cnstr\default.lazy.verify.cpp
utilities\tuple\tuple.tuple\tuple.rel\size_incompatible_comparison.verify.cpp
utilities\utility\utility.underlying\to_underlying.verify.cpp

# Contest does not understand .sh tests, which must be run specially
atomics\atomics.general\replace_failure_order_codegen.sh.cpp
containers\associative\map\PR28469_undefined_behavior_segfault.sh.cpp
input.output\iostream.objects\narrow.stream.objects\cerr.sh.cpp
input.output\iostream.objects\narrow.stream.objects\cin.sh.cpp
input.output\iostream.objects\narrow.stream.objects\clog.sh.cpp
input.output\iostream.objects\narrow.stream.objects\cout.sh.cpp
input.output\iostream.objects\wide.stream.objects\wcerr.sh.cpp
input.output\iostream.objects\wide.stream.objects\wcin.sh.cpp
input.output\iostream.objects\wide.stream.objects\wclog.sh.cpp
input.output\iostream.objects\wide.stream.objects\wcout.sh.cpp
namespace\addressable_functions.sh.cpp
strings\basic.string\string.capacity\shrink_to_fit.explicit_instantiation.sh.cpp
thread\thread.condition\thread.condition.condvarany\wait_terminates.sh.cpp
utilities\format\format.arguments\format.arg.store\make_format_args.sh.cpp
