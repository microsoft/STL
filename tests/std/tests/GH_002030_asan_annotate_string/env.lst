# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

# This test matrix is the usual test matrix, with all currently unsupported options removed, crossed with the ASan flags.

# TRANSITION, google/sanitizers#328: clang-cl does not support /MDd or /MTd with ASan
RUNALL_INCLUDE ..\prefix.lst
RUNALL_CROSSLIST
PM_CL="/Zi /wd4611 /w14640 /Zc:threadSafeInit-" PM_LINK="/debug"
RUNALL_CROSSLIST
PM_CL="-fsanitize=address /BE /c /EHsc /MD /std:c++14"
PM_CL="-fsanitize=address /BE /c /EHsc /MDd /std:c++17 /permissive-"
PM_CL="-fsanitize=address /BE /c /EHsc /MT /std:c++20 /permissive-"
PM_CL="-fsanitize=address /BE /c /EHsc /MTd /std:c++latest /permissive-"
PM_CL="-fsanitize=address /EHsc /MD /std:c++14"
PM_CL="-fsanitize=address /EHsc /MD /std:c++17"
PM_CL="-fsanitize=address /EHsc /MD /std:c++20"
PM_CL="-fsanitize=address /EHsc /MD /std:c++latest /permissive- /Zc:char8_t- /Zc:preprocessor"
PM_CL="-fsanitize=address /EHsc /MD /std:c++latest /permissive- /Zc:noexceptTypes-"
PM_CL="-fsanitize=address /EHsc /MDd /std:c++14 /fp:except /Zc:preprocessor"
PM_CL="-fsanitize=address /EHsc /MDd /std:c++17 /permissive-"
PM_CL="-fsanitize=address /EHsc /MDd /std:c++20 /permissive-"
PM_CL="-fsanitize=address /EHsc /MDd /std:c++latest /permissive- /Zc:wchar_t-"
PM_CL="-fsanitize=address /EHsc /MDd /std:c++latest /permissive-"
PM_CL="-fsanitize=address /EHsc /MT /std:c++latest /permissive- /analyze:only /analyze:autolog-"
PM_CL="-fsanitize=address /EHsc /MT /std:c++latest /permissive-"
PM_CL="-fsanitize=address /EHsc /MTd /std:c++latest /permissive"
PM_CL="-fsanitize=address /EHsc /MTd /std:c++latest /permissive- /analyze:only /analyze:autolog-"
PM_CL="-fsanitize=address /EHsc /MTd /std:c++latest /permissive- /fp:strict"
PM_CL="-fsanitize=address /EHsc /MTd /std:c++latest /permissive-"
PM_CL="/D_ANNOTATE_STRING /BE /c /EHsc /MD /std:c++14"
PM_CL="/D_ANNOTATE_STRING /BE /c /EHsc /MDd /std:c++17 /permissive-"
PM_CL="/D_ANNOTATE_STRING /BE /c /EHsc /MT /std:c++20 /permissive-"
PM_CL="/D_ANNOTATE_STRING /BE /c /EHsc /MTd /std:c++latest /permissive-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++14"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++14 /Zc:char8_t"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++17"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++17 /Zc:char8_t"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++20"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++latest /permissive- /Zc:char8_t- /Zc:preprocessor"
PM_CL="/D_ANNOTATE_STRING /EHsc /MD /std:c++latest /permissive- /Zc:noexceptTypes-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MDd /std:c++14 /fp:except /Zc:preprocessor"
PM_CL="/D_ANNOTATE_STRING /EHsc /MDd /std:c++17 /permissive-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MDd /std:c++20 /permissive-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MDd /std:c++latest /permissive- /Zc:wchar_t-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MDd /std:c++latest /permissive-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MT /std:c++latest /permissive- /analyze:only /analyze:autolog-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MT /std:c++latest /permissive-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MTd /std:c++latest /permissive"
PM_CL="/D_ANNOTATE_STRING /EHsc /MTd /std:c++latest /permissive- /analyze:only /analyze:autolog-"
PM_CL="/D_ANNOTATE_STRING /EHsc /MTd /std:c++latest /permissive- /fp:strict"
PM_CL="/D_ANNOTATE_STRING /EHsc /MTd /std:c++latest /permissive-"
# TRANSITION, clang-cl does not support /alternatename so we cannot test /D_ANNOTATE_STRING without -fsanitize=address
PM_COMPILER="clang-cl" PM_CL="-fsanitize=address -fno-ms-compatibility -fno-delayed-template-parsing -Wno-unqualified-std-cast-call /EHsc /MD /std:c++14"
PM_COMPILER="clang-cl" PM_CL="-fsanitize=address -fno-ms-compatibility -fno-delayed-template-parsing -Wno-unqualified-std-cast-call /EHsc /MD /std:c++17"
PM_COMPILER="clang-cl" PM_CL="-fsanitize=address -fno-ms-compatibility -fno-delayed-template-parsing -Wno-unqualified-std-cast-call /EHsc /MT /std:c++20 /permissive-"
PM_COMPILER="clang-cl" PM_CL="-fsanitize=address -fno-ms-compatibility -fno-delayed-template-parsing -Wno-unqualified-std-cast-call /EHsc /MT /std:c++latest /permissive- /fp:strict"
