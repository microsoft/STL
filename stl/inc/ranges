// ranges standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _RANGES_
#define _RANGES_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#ifndef __cpp_lib_concepts
#pragma message("The contents of <ranges> are available only with C++20 concepts support.")
#else // ^^^ !defined(__cpp_lib_concepts) / defined(__cpp_lib_concepts) vvv
#include <iterator>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN
namespace ranges {
    // Much machinery defined in <xutility>

    // clang-format off
    // CONCEPT ranges::viewable_range
    template <class _Rng>
    concept viewable_range = range<_Rng>
        && (borrowed_range<_Rng> || view<remove_cvref_t<_Rng>>);


    // CLASS ranges::ref_view
    // clang-format off
    template <range _Rng>
        requires is_object_v<_Rng>
    class ref_view : public view_interface<ref_view<_Rng>> {
        // clang-format on
        void _Rvalue_poison(_Rng&);
        void _Rvalue_poison(_Rng&&) = delete;

    public:
        constexpr ref_view() noexcept = default;

        // clang-format off
        template <_Not_same_as<ref_view> _OtherRng>
        //     requires convertible_to<_OtherRng, _Rng&> && requires { _Rvalue_poison(declval<_OtherRng>()); }
        constexpr ref_view(_OtherRng&& _Range)
            // clang-format on
            : _Myrange(_STD addressof(static_cast<_Rng&>(_STD forward<_OtherRng>(_Range)))) {}

        constexpr _Rng& base() const {
            return *_Myrange;
        }

        constexpr iterator_t<_Rng> begin() const {
            return _RANGES begin(*_Myrange);
        }

        constexpr sentinel_t<_Rng> end() const {
            return _RANGES end(*_Myrange);
        }

        // clang-format off
        constexpr bool empty() const
            requires _Can_empty<_Rng>
        {
            // clang-format on
            return _RANGES empty(*_Myrange);
        }

        // clang-format off
        constexpr auto size() const
            requires sized_range<_Rng>
        // clang-format on
        {
            return _RANGES size(*_Myrange);
        }

        // clang-format off
        constexpr auto data() const
            requires contiguous_range<_Rng>
        // clang-format on
        {
            return _RANGES data(*_Myrange);
        }

    private:
        _Rng* _Myrange = nullptr;
    };

    template <class _Rng>
    ref_view(_Rng&) -> ref_view<_Rng>;
} // namespace ranges

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // __cpp_lib_concepts
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _RANGES_
