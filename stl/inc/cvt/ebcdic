// codecvt facet for multibyte code as EBCDIC

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _CVT_EBCDIC_
#define _CVT_EBCDIC_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <cwchar>
#include <locale>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

namespace stdext {
    namespace cvt {
        using _Statype = _CSTD mbstate_t;

        // CLASS TEMPLATE codecvt_ebcdic
        template <class _Elem, unsigned char _Maxcode = 0xff>
        class codecvt_ebcdic
            : public _STD
                  codecvt<_Elem, char, _Statype> { // facet for converting between ISO-8859-1 _Elem and EBCDIC bytes
            static const unsigned char _Atoe[0x100];
            static const unsigned char _Etoa[0x100];

        public:
            using _Mybase     = _STD codecvt<_Elem, char, _Statype>;
            using result      = typename _Mybase::result;
            using _Byte       = char;
            using intern_type = _Elem;
            using extern_type = _Byte;
            using state_type  = _Statype;

            explicit codecvt_ebcdic(size_t _Refs = 0) : _Mybase(_Refs) {}

            virtual ~codecvt_ebcdic() noexcept {}

        protected:
            virtual result do_in(_Statype&, const _Byte* _First1, const _Byte* _Last1, const _Byte*& _Mid1,
                _Elem* _First2, _Elem* _Last2, _Elem*& _Mid2) const override {
                // convert bytes [_First1, _Last1) to [_First2, _Last)
                _Mid1 = _First1;
                _Mid2 = _First2;
                while (_Mid1 != _Last1 && _Mid2 != _Last2) { // convert a multibyte sequence
                    unsigned char _Ch = _Etoa[static_cast<unsigned char>(*_Mid1++)];

                    if (_Maxcode < _Ch) {
                        return _Mybase::error; // code too large
                    }

                    *_Mid2++ = static_cast<_Elem>(_Ch);
                }

                return _First1 == _Mid1 ? _Mybase::partial : _Mybase::ok;
            }

            virtual result do_out(_Statype&, const _Elem* _First1, const _Elem* _Last1, const _Elem*& _Mid1,
                _Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const override {
                // convert [_First1, _Last1) to bytes [_First2, _Last)
                _Mid1 = _First1;
                _Mid2 = _First2;
                while (_Mid1 != _Last1 && _Mid2 != _Last2) { // convert and put a wide char
                    unsigned char _Ch = static_cast<unsigned char>(*_Mid1++);

                    if (_Maxcode < _Ch) {
                        return _Mybase::error;
                    }

                    *_Mid2++ = static_cast<_Byte>(_Atoe[_Ch]);
                }

                return _First1 == _Mid1 ? _Mybase::partial : _Mybase::ok;
            }

            virtual result do_unshift(_Statype&, _Byte* _First2, _Byte*, _Byte*& _Mid2) const override {
                // generate bytes to return to default shift state
                _Mid2 = _First2;
                return _Mybase::ok;
            }

            virtual int do_length(
                _Statype&, const _Byte* _First1, const _Byte* _Last1, size_t _Count) const noexcept override {
                // return min(_Count, converted length of bytes [_First1, _Last1))
                const auto _Wchars = static_cast<size_t>(_Last1 - _First1);

                return static_cast<int>(_Count < _Wchars ? _Count : _Wchars);
            }

            virtual bool do_always_noconv() const noexcept override { // return true if conversions never change input
                return false;
            }

            virtual int do_max_length() const noexcept override { // return maximum length required for a conversion
                return 1;
            }

            virtual int do_encoding() const noexcept override { // return length of code sequence (from codecvt)
                return 1;
            }
        };

        // map EBCDIC to ASCII
        template <class _Elem, unsigned char _Maxcode>
        const unsigned char codecvt_ebcdic<_Elem, _Maxcode>::_Etoa[0x100] = {
            0x00, 0x01, 0x02, 0x03, 0x9c, 0x09, 0x86, 0x7f, // 00
            0x97, 0x8d, 0x8e, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, //
            0x10, 0x11, 0x12, 0x13, 0x9d, 0x85, 0x08, 0x87, //
            0x18, 0x19, 0x92, 0x8f, 0x1c, 0x1d, 0x1e, 0x1f, //
            0x80, 0x81, 0x82, 0x83, 0x84, 0x0a, 0x17, 0x1b, // 20
            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x05, 0x06, 0x07, //
            0x90, 0x91, 0x16, 0x93, 0x94, 0x95, 0x96, 0x04, //
            0x98, 0x99, 0x9a, 0x9b, 0x14, 0x15, 0x9e, 0x1a, //
            0x20, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, // 40
            0xa7, 0xa8, 0xd5, 0x2e, 0x3c, 0x28, 0x2b, 0x7c, //
            0x26, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, //
            0xb0, 0xb1, 0x21, 0x24, 0x2a, 0x29, 0x3b, 0x5e, //
            0x2d, 0x2f, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, // 60
            0xb8, 0xb9, 0xe5, 0x2c, 0x25, 0x5f, 0x3e, 0x3f, //
            0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, //
            0xc2, 0x60, 0x3a, 0x23, 0x40, 0x27, 0x3d, 0x22, //
            0xc3, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, // 80
            0x68, 0x69, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, //
            0xca, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, //
            0x71, 0x72, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, //
            0xd1, 0x7e, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, // a0
            0x79, 0x7a, 0xd2, 0xd3, 0xd4, 0x5b, 0xd6, 0xd7, //
            0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, //
            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0x5d, 0xe6, 0xe7, //
            0x7b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, // c0
            0x48, 0x49, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, //
            0x7d, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, //
            0x51, 0x52, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, //
            0x5c, 0x9f, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, // e0
            0x59, 0x5a, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, //
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, //
            0x38, 0x39, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, //
        };

        // map ASCII to EBCDIC
        template <class _Elem, unsigned char _Maxcode>
        const unsigned char codecvt_ebcdic<_Elem, _Maxcode>::_Atoe[0x100] = {
            0x00, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f, // 00
            0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, //
            0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26, //
            0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f, //
            0x40, 0x5a, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d, // 20
            0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61, //
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, //
            0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f, //
            0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, // 40
            0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, //
            0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, //
            0xe7, 0xe8, 0xe9, 0xad, 0xe0, 0xbd, 0x5f, 0x6d, //
            0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, // 60
            0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, //
            0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, //
            0xa7, 0xa8, 0xa9, 0xc0, 0x4f, 0xd0, 0xa1, 0x07, //
            0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17, // 80
            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x09, 0x0a, 0x1b, //
            0x30, 0x31, 0x1a, 0x33, 0x34, 0x35, 0x36, 0x08, //
            0x38, 0x39, 0x3a, 0x3b, 0x04, 0x14, 0x3e, 0xe1, //
            0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, // a0
            0x49, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, //
            0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, //
            0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, //
            0x76, 0x77, 0x78, 0x80, 0x8a, 0x8b, 0x8c, 0x8d, // c0
            0x8e, 0x8f, 0x90, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, //
            0x9f, 0xa0, 0xaa, 0xab, 0xac, 0x4a, 0xae, 0xaf, //
            0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, //
            0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0x6a, 0xbe, 0xbf, // eo
            0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xda, 0xdb, //
            0xdc, 0xdd, 0xde, 0xdf, 0xea, 0xeb, 0xec, 0xed, //
            0xee, 0xef, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, //
        };
    } // namespace cvt
} // namespace stdext

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // _STL_COMPILER_PREPROCESSOR
#endif // _CVT_EBCDIC_
