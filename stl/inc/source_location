// source_location standard header (core)

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _SOURCE_LOCATION_
#define _SOURCE_LOCATION_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#if !defined(__cpp_lib_source_location)
#if defined(__clang__)
#if __clang_major__ < 15
#pragma message("Your clang is too old. We need at least clang 15.0.0")
#else
#pragma message("The contents of <source_location> are available only with C++20.")
#endif
#else
#pragma message("The contents of <source_location> are available only with C++20 consteval support.")
#endif
#else // ^^^ !defined(__cpp_lib_source_location) / defined(__cpp_lib_source_location) vvv

#include <cstdint>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN
struct source_location {
#if defined(__has_builtin)
#if __has_builtin(__builtin_source_location)
private:
    /*
    clang implements GCC's __builtin_source_location.
    */
    struct __impl {
        char const* _M_file_name;
        char const* _M_function_name;
        unsigned _M_line;
        unsigned _M_column;
    };
    using __builtin_ret_type = decltype(__builtin_source_location());

public:
    _NODISCARD static consteval source_location current(
        __builtin_ret_type _Soc_impl_ptr = __builtin_source_location()) noexcept {
        source_location _Result;
        if (_Soc_impl_ptr != nullptr) {
            __impl const& _Soc_impl = *static_cast<__impl const*>(_Soc_impl_ptr);
            _Result._Line           = _Soc_impl._M_line;
            _Result._Column         = _Soc_impl._M_column;
            _Result._File           = _Soc_impl._M_file_name;
            _Result._Function       = _Soc_impl._M_function_name;
        }
        return _Result;
    }
#endif
#endif
    _NODISCARD static consteval source_location current(const uint_least32_t _Line_
#if defined(__has_builtin)
#if !__has_builtin(__builtin_source_location)
                                                        = __builtin_LINE()
#endif
#else
                                                        = __builtin_LINE()
#endif
                                                            ,
        const uint_least32_t _Column_ = __builtin_COLUMN(), const char* const _File_ = __builtin_FILE(),
        const char* const _Function_ = __builtin_FUNCTION()) noexcept {
        source_location _Result;
        _Result._Line     = _Line_;
        _Result._Column   = _Column_;
        _Result._File     = _File_;
        _Result._Function = _Function_;
        return _Result;
    }
    _NODISCARD_CTOR constexpr source_location() noexcept = default;

    _NODISCARD constexpr uint_least32_t line() const noexcept {
        return _Line;
    }
    _NODISCARD constexpr uint_least32_t column() const noexcept {
        return _Column;
    }
    _NODISCARD constexpr const char* file_name() const noexcept {
        return _File;
    }
    _NODISCARD constexpr const char* function_name() const noexcept {
        return _Function;
    }

private:
    uint_least32_t _Line{};
    uint_least32_t _Column{};
    const char* _File     = "";
    const char* _Function = "";
};

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // !defined(__cpp_consteval)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _SOURCE_LOCATION_
