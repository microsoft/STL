// array standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _ARRAY_
#define _ARRAY_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <xutility>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN

// CLASS TEMPLATE _Array_iterator
template <class _Ty, bool _Const, bool _Checked>
class _Array_iterator {
public:
#ifdef __cpp_lib_concepts
    using iterator_concept = contiguous_iterator_tag;
#endif // __cpp_lib_concepts
    using iterator_category = random_access_iterator_tag;
    using value_type        = _Ty;
    using difference_type   = ptrdiff_t;
    using pointer           = _Maybe_const<_Const, _Ty>*;
    using reference         = _Maybe_const<_Const, _Ty>&;

    _CONSTEXPR17 _Array_iterator() noexcept = default;

    _CONSTEXPR17 explicit _Array_iterator(pointer _Ptr_, pointer _Begin_ = nullptr, pointer _End_ = nullptr) noexcept
#if _ITERATOR_DEBUG_LEVEL == 0
        : _Ptr(_Ptr_) {
        (void) _Begin_;
        (void) _End_;
    }
#else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 / _ITERATOR_DEBUG_LEVEL != 0 vvv
        : _Ptr(_Ptr_), _Begin(_Begin_), _End(_End_) {
        if constexpr (_Checked) {
            _STL_VERIFY(_Begin <= _Ptr, "cannot create array iterator outside of bounds");
            _STL_VERIFY(_Ptr <= _End, "cannot create array iterator outside of bounds");
        }
    }
#endif // _ITERATOR_DEBUG_LEVEL != 0

    template <bool _IsConst = _Const, enable_if_t<_IsConst, int> = 0>
    _CONSTEXPR17 _Array_iterator(const _Array_iterator<_Ty, !_IsConst, _Checked>& _It) noexcept
#if _ITERATOR_DEBUG_LEVEL == 0
        : _Ptr(_It._Ptr) {
    }
#else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 / _ITERATOR_DEBUG_LEVEL != 0 vvv
        : _Ptr(_It._Ptr), _Begin(_It._Begin), _End(_It._End) {
    }
#endif // _ITERATOR_DEBUG_LEVEL != 0

    _NODISCARD _CONSTEXPR17 reference operator*() const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot dereference value-initialized array iterator");
            _STL_VERIFY(_Begin <= _Ptr && _Ptr < _End, "cannot dereference out of range array iterator");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return *_Ptr;
    }

    _NODISCARD _CONSTEXPR17 pointer operator->() const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot dereference value-initialized array iterator");
            _STL_VERIFY(_Begin <= _Ptr && _Ptr < _End, "cannot dereference out of range array iterator");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr;
    }

    _NODISCARD _CONSTEXPR17 reference operator[](const ptrdiff_t _Off) const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _Verify_offset(_Off);
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr[_Off];
    }

    _CONSTEXPR17 _Array_iterator& operator++() noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot increment value-initialized array iterator");
            _STL_VERIFY(_Ptr < _End, "cannot increment array iterator past end");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        ++_Ptr;
        return *this;
    }

    _CONSTEXPR17 _Array_iterator operator++(int) noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot increment value-initialized array iterator");
            _STL_VERIFY(_Ptr < _End, "cannot increment array iterator past end");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        _Array_iterator _Tmp = *this;
        ++_Ptr;
        return _Tmp;
    }

    _CONSTEXPR17 _Array_iterator& operator--() noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot decrement value-initialized array iterator");
            _STL_VERIFY(_Begin < _Ptr, "cannot decrement array iterator before begin");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        --_Ptr;
        return *this;
    }

    _CONSTEXPR17 _Array_iterator operator--(int) noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Ptr, "cannot decrement value-initialized array iterator");
            _STL_VERIFY(_Begin < _Ptr, "cannot decrement array iterator before begin");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        _Array_iterator _Tmp = *this;
        --_Ptr;
        return _Tmp;
    }

    _CONSTEXPR17 _Array_iterator& operator+=(const ptrdiff_t _Off) noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _Verify_offset(_Off);
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        _Ptr += _Off;
        return *this;
    }

    _NODISCARD _CONSTEXPR17 _Array_iterator operator+(const ptrdiff_t _Off) const noexcept {
        _Array_iterator _Tmp = *this;
        return _Tmp += _Off;
    }

    _CONSTEXPR17 _Array_iterator& operator-=(const ptrdiff_t _Off) noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _Verify_offset(-_Off);
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        _Ptr -= _Off;
        return *this;
    }

    _NODISCARD _CONSTEXPR17 _Array_iterator operator-(const ptrdiff_t _Off) const noexcept {
        _Array_iterator _Tmp = *this;
        return _Tmp -= _Off;
    }

    _NODISCARD _CONSTEXPR17 friend _Array_iterator operator+(const ptrdiff_t _Off, _Array_iterator _Next) noexcept {
        return _Next += _Off;
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 ptrdiff_t operator-(
        const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Begin == _Right._Begin, "array iterators incompatible");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr - _Right._Ptr;
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator==(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Begin == _Right._Begin, "array iterators incompatible");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr == _Right._Ptr;
    }

#if _HAS_CXX20
    template <bool _OtherConst>
    _NODISCARD constexpr strong_ordering operator<=>(
        const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Begin == _Right._Begin, "array iterators incompatible");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr <=> _Right._Ptr;
    }

#else // ^^^ _HAS_CXX20 ^^^ / vvv !_HAS_CXX20 vvv

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator!=(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
        return !(*this == _Right);
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator<(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
#if _ITERATOR_DEBUG_LEVEL != 0
        if constexpr (_Checked) {
            _STL_VERIFY(_Begin == _Right._Begin, "array iterators incompatible");
        }
#endif // _ITERATOR_DEBUG_LEVEL != 0
        return _Ptr < _Right._Ptr;
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator>(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
        return _Right < *this;
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator<=(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
        return !(_Right < *this);
    }

    template <bool _OtherConst>
    _NODISCARD _CONSTEXPR17 bool operator>=(const _Array_iterator<_Ty, _OtherConst, _Checked>& _Right) const noexcept {
        return !(*this < _Right);
    }
#endif // !_HAS_CXX20

#if _ITERATOR_DEBUG_LEVEL != 0
    constexpr void _Verify_offset(const ptrdiff_t _Off) const noexcept {
        if constexpr (_Checked) {
            if (_Off != 0) {
                _STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");
            }

            if (_Off < 0) {
                _STL_VERIFY(_Ptr - _Begin >= -_Off, "cannot seek array iterator before begin");
            }

            if (_Off > 0) {
                _STL_VERIFY(_End - _Ptr >= _Off, "cannot seek array iterator after end");
            }
        }
    }

    template <bool _OtherConst>
    friend constexpr void _Verify_range(
        const _Array_iterator& _First, const _Array_iterator<_Ty, _OtherConst, _Checked>& _Last) noexcept {
        if constexpr (_Checked) {
            _STL_VERIFY(_First <= _Last, "array iterator range transposed");
        }
    }
#endif // _ITERATOR_DEBUG_LEVEL != 0

    using _Prevent_inheriting_unwrap = _Array_iterator;

    _NODISCARD constexpr pointer _Unwrapped() const noexcept {
        return _Ptr;
    }

    static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;

    constexpr void _Seek_to(pointer _It) noexcept {
        _Ptr = _It;
    }

private:
    template <class, bool, bool>
    friend class _Array_iterator;

    pointer _Ptr{}; // current position in array
#if _ITERATOR_DEBUG_LEVEL != 0
    pointer _Begin{}; // beginning of array
    pointer _End{}; // end of array
#endif // _ITERATOR_DEBUG_LEVEL != 0
};

#if _HAS_CXX20
template <class _Ty, bool _Const, bool _Checked>
struct pointer_traits<_Array_iterator<_Ty, _Const, _Checked>> {
    using pointer         = _Array_iterator<_Ty, _Const, _Checked>;
    using element_type    = _Maybe_const<_Const, _Ty>;
    using difference_type = ptrdiff_t;

    _NODISCARD static constexpr element_type* to_address(const pointer _Iter) noexcept {
        return _Iter._Unwrapped();
    }
};
#endif // _HAS_CXX20

// CLASS TEMPLATE array
template <class _Ty, size_t _Size>
class array {
public:
    using value_type      = _Ty;
    using size_type       = size_t;
    using difference_type = ptrdiff_t;
    using pointer         = _Ty*;
    using const_pointer   = const _Ty*;
    using reference       = _Ty&;
    using const_reference = const _Ty&;

    using iterator       = _Array_iterator<_Ty, false, true>;
    using const_iterator = _Array_iterator<_Ty, true, true>;

    using reverse_iterator       = _STD reverse_iterator<iterator>;
    using const_reverse_iterator = _STD reverse_iterator<const_iterator>;

#if _HAS_TR1_NAMESPACE
    _DEPRECATE_TR1_NAMESPACE void assign(const _Ty& _Value) {
        _STD fill_n(_Elems, _Size, _Value);
    }
#endif // _HAS_TR1_NAMESPACE

    _CONSTEXPR20 void fill(const _Ty& _Value) {
        _STD fill_n(_Elems, _Size, _Value);
    }

    _CONSTEXPR20 void swap(array& _Other) noexcept(_Is_nothrow_swappable<_Ty>::value) {
        _Swap_ranges_unchecked(_Elems, _Elems + _Size, _Other._Elems);
    }

    _NODISCARD _CONSTEXPR17 iterator begin() noexcept {
        return iterator{_Elems, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 const_iterator begin() const noexcept {
        return const_iterator{_Elems, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 iterator end() noexcept {
        return iterator{_Elems + _Size, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 const_iterator end() const noexcept {
        return const_iterator{_Elems + _Size, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 reverse_iterator rbegin() noexcept {
        return reverse_iterator(iterator{_Elems + _Size, _Elems, _Elems + _Size});
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator rbegin() const noexcept {
        return const_reverse_iterator(const_iterator{_Elems + _Size, _Elems, _Elems + _Size});
    }

    _NODISCARD _CONSTEXPR17 reverse_iterator rend() noexcept {
        return reverse_iterator(iterator{_Elems, _Elems, _Elems + _Size});
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator rend() const noexcept {
        return const_reverse_iterator(const_iterator{_Elems, _Elems, _Elems + _Size});
    }

    _NODISCARD _CONSTEXPR17 const_iterator cbegin() const noexcept {
        return const_iterator{_Elems, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 const_iterator cend() const noexcept {
        return const_iterator{_Elems + _Size, _Elems, _Elems + _Size};
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator crbegin() const noexcept {
        return const_reverse_iterator(const_iterator{_Elems + _Size, _Elems, _Elems + _Size});
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator crend() const noexcept {
        return const_reverse_iterator(const_iterator{_Elems, _Elems, _Elems + _Size});
    }

    _CONSTEXPR17 _Ty* _Unchecked_begin() noexcept {
        return _Elems;
    }

    _CONSTEXPR17 const _Ty* _Unchecked_begin() const noexcept {
        return _Elems;
    }

    _CONSTEXPR17 _Ty* _Unchecked_end() noexcept {
        return _Elems + _Size;
    }

    _CONSTEXPR17 const _Ty* _Unchecked_end() const noexcept {
        return _Elems + _Size;
    }

    _NODISCARD constexpr size_type size() const noexcept {
        return _Size;
    }

    _NODISCARD constexpr size_type max_size() const noexcept {
        return _Size;
    }

    _NODISCARD constexpr bool empty() const noexcept {
        return false;
    }

    _NODISCARD _CONSTEXPR17 reference at(size_type _Pos) {
        if (_Size <= _Pos) {
            _Xran();
        }

        return _Elems[_Pos];
    }

    _NODISCARD constexpr const_reference at(size_type _Pos) const {
        if (_Size <= _Pos) {
            _Xran();
        }

        return _Elems[_Pos];
    }

    _NODISCARD _CONSTEXPR17 reference operator[](_In_range_(0, _Size - 1) size_type _Pos) noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_VERIFY(_Pos < _Size, "array subscript out of range");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[_Pos];
    }

    _NODISCARD constexpr const_reference operator[](_In_range_(0, _Size - 1) size_type _Pos) const noexcept
    /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_VERIFY(_Pos < _Size, "array subscript out of range");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[_Pos];
    }

    _NODISCARD _CONSTEXPR17 reference front() noexcept /* strengthened */ {
        return _Elems[0];
    }

    _NODISCARD constexpr const_reference front() const noexcept /* strengthened */ {
        return _Elems[0];
    }

    _NODISCARD _CONSTEXPR17 reference back() noexcept /* strengthened */ {
        return _Elems[_Size - 1];
    }

    _NODISCARD constexpr const_reference back() const noexcept /* strengthened */ {
        return _Elems[_Size - 1];
    }

    _NODISCARD _CONSTEXPR17 _Ty* data() noexcept {
        return _Elems;
    }

    _NODISCARD _CONSTEXPR17 const _Ty* data() const noexcept {
        return _Elems;
    }

    [[noreturn]] void _Xran() const {
        _Xout_of_range("invalid array<T, N> subscript");
    }

    _Ty _Elems[_Size];
};

#if _HAS_CXX17
template <class _First, class... _Rest>
struct _Enforce_same {
    static_assert(conjunction_v<is_same<_First, _Rest>...>,
        "N4687 26.3.7.2 [array.cons]/2: "
        "Requires: (is_same_v<T, U> && ...) is true. Otherwise the program is ill-formed.");
    using type = _First;
};

template <class _First, class... _Rest>
array(_First, _Rest...) -> array<typename _Enforce_same<_First, _Rest...>::type, 1 + sizeof...(_Rest)>;
#endif // _HAS_CXX17

template <class _Ty>
class array<_Ty, 0> {
public:
    using value_type      = _Ty;
    using size_type       = size_t;
    using difference_type = ptrdiff_t;
    using pointer         = _Ty*;
    using const_pointer   = const _Ty*;
    using reference       = _Ty&;
    using const_reference = const _Ty&;

    using iterator               = _Array_iterator<_Ty, false, true>;
    using const_iterator         = _Array_iterator<_Ty, true, true>;
    using reverse_iterator       = _STD reverse_iterator<iterator>;
    using const_reverse_iterator = _STD reverse_iterator<const_iterator>;

#if _HAS_TR1_NAMESPACE
    _DEPRECATE_TR1_NAMESPACE void assign(const _Ty&) {}
#endif // _HAS_TR1_NAMESPACE

    _CONSTEXPR20 void fill(const _Ty&) {}

    _CONSTEXPR20 void swap(array&) noexcept {}

    _NODISCARD _CONSTEXPR17 iterator begin() noexcept {
        return iterator{};
    }

    _NODISCARD _CONSTEXPR17 const_iterator begin() const noexcept {
        return const_iterator{};
    }

    _NODISCARD _CONSTEXPR17 iterator end() noexcept {
        return iterator{};
    }

    _NODISCARD _CONSTEXPR17 const_iterator end() const noexcept {
        return const_iterator{};
    }

    _NODISCARD _CONSTEXPR17 reverse_iterator rbegin() noexcept {
        return reverse_iterator{iterator{}};
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator rbegin() const noexcept {
        return const_reverse_iterator{const_iterator{}};
    }

    _NODISCARD _CONSTEXPR17 reverse_iterator rend() noexcept {
        return reverse_iterator{iterator{}};
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator rend() const noexcept {
        return const_reverse_iterator{const_iterator{}};
    }

    _NODISCARD _CONSTEXPR17 const_iterator cbegin() const noexcept {
        return const_iterator{};
    }

    _NODISCARD _CONSTEXPR17 const_iterator cend() const noexcept {
        return const_iterator{};
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator crbegin() const noexcept {
        return const_reverse_iterator{const_iterator{}};
    }

    _NODISCARD _CONSTEXPR17 const_reverse_iterator crend() const noexcept {
        return const_reverse_iterator{const_iterator{}};
    }

    _CONSTEXPR17 _Ty* _Unchecked_begin() noexcept {
        return nullptr;
    }

    _CONSTEXPR17 const _Ty* _Unchecked_begin() const noexcept {
        return nullptr;
    }

    _CONSTEXPR17 _Ty* _Unchecked_end() noexcept {
        return nullptr;
    }

    _CONSTEXPR17 const _Ty* _Unchecked_end() const noexcept {
        return nullptr;
    }

    _NODISCARD constexpr size_type size() const noexcept {
        return 0;
    }

    _NODISCARD constexpr size_type max_size() const noexcept {
        return 0;
    }

    _NODISCARD constexpr bool empty() const noexcept {
        return true;
    }

    [[noreturn]] reference at(size_type) {
        _Xran();
    }

    [[noreturn]] const_reference at(size_type) const {
        _Xran();
    }

    _NODISCARD reference operator[](size_type) noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array subscript out of range");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD const_reference operator[](size_type) const noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array subscript out of range");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD reference front() noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array<T, 0>::front() invalid");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD const_reference front() const noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array<T, 0>::front() invalid");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD reference back() noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array<T, 0>::back() invalid");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD const_reference back() const noexcept /* strengthened */ {
#if _CONTAINER_DEBUG_LEVEL > 0
        _STL_REPORT_ERROR("array<T, 0>::back() invalid");
#endif // _CONTAINER_DEBUG_LEVEL > 0
        return _Elems[0];
    }

    _NODISCARD _CONSTEXPR17 _Ty* data() noexcept {
        return nullptr;
    }

    _NODISCARD _CONSTEXPR17 const _Ty* data() const noexcept {
        return nullptr;
    }

    [[noreturn]] void _Xran() const {
        _Xout_of_range("invalid array<T, 0> subscript");
    }

    _Ty _Elems[1];
};

template <class _Ty, size_t _Size, enable_if_t<_Size == 0 || _Is_swappable<_Ty>::value, int> = 0>
_CONSTEXPR20 void swap(array<_Ty, _Size>& _Left, array<_Ty, _Size>& _Right) noexcept(noexcept(_Left.swap(_Right))) {
    return _Left.swap(_Right);
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator==(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return _STD equal(_Left.begin(), _Left.end(), _Right.begin());
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator!=(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return !(_Left == _Right);
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator<(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return _STD lexicographical_compare(_Left.begin(), _Left.end(), _Right.begin(), _Right.end());
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator>(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return _Right < _Left;
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator<=(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return !(_Right < _Left);
}

template <class _Ty, size_t _Size>
_NODISCARD _CONSTEXPR20 bool operator>=(const array<_Ty, _Size>& _Left, const array<_Ty, _Size>& _Right) {
    return !(_Left < _Right);
}

#if _HAS_CXX20
// FUNCTION TEMPLATE to_array
template <class _Ty, size_t _Size, size_t... _Idx>
_NODISCARD constexpr array<remove_cv_t<_Ty>, _Size> _To_array_lvalue_impl(
    _Ty (&_Array)[_Size], index_sequence<_Idx...>) {
    return {{_Array[_Idx]...}};
}

template <class _Ty, size_t _Size, size_t... _Idx>
_NODISCARD constexpr array<remove_cv_t<_Ty>, _Size> _To_array_rvalue_impl(
    _Ty(&&_Array)[_Size], index_sequence<_Idx...>) {
    return {{_STD move(_Array[_Idx])...}};
}

template <class _Ty, size_t _Size>
_NODISCARD constexpr array<remove_cv_t<_Ty>, _Size> to_array(_Ty (&_Array)[_Size]) {
    static_assert(!is_array_v<_Ty>, "N4830 [array.creation]/1: "
                                    "to_array does not accept multidimensional arrays.");
    static_assert(is_constructible_v<_Ty, _Ty&>, "N4830 [array.creation]/1: "
                                                 "to_array requires copy constructible elements.");
    return _To_array_lvalue_impl(_Array, make_index_sequence<_Size>{});
}

template <class _Ty, size_t _Size>
_NODISCARD constexpr array<remove_cv_t<_Ty>, _Size> to_array(_Ty(&&_Array)[_Size]) {
    static_assert(!is_array_v<_Ty>, "N4830 [array.creation]/4: "
                                    "to_array does not accept multidimensional arrays.");
    static_assert(is_move_constructible_v<_Ty>, "N4830 [array.creation]/4: "
                                                "to_array requires move constructible elements.");
    return _To_array_rvalue_impl(_STD move(_Array), make_index_sequence<_Size>{});
}
#endif // _HAS_CXX20

// TUPLE INTERFACE TO array
template <size_t _Idx, class _Ty, size_t _Size>
_NODISCARD constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept {
    static_assert(_Idx < _Size, "array index out of bounds");
    return _Arr._Elems[_Idx];
}

template <size_t _Idx, class _Ty, size_t _Size>
_NODISCARD constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept {
    static_assert(_Idx < _Size, "array index out of bounds");
    return _Arr._Elems[_Idx];
}

template <size_t _Idx, class _Ty, size_t _Size>
_NODISCARD constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept {
    static_assert(_Idx < _Size, "array index out of bounds");
    return _STD move(_Arr._Elems[_Idx]);
}

template <size_t _Idx, class _Ty, size_t _Size>
_NODISCARD constexpr const _Ty&& get(const array<_Ty, _Size>&& _Arr) noexcept {
    static_assert(_Idx < _Size, "array index out of bounds");
    return _STD move(_Arr._Elems[_Idx]);
}

#if _HAS_TR1_NAMESPACE
namespace _DEPRECATE_TR1_NAMESPACE tr1 {
    using _STD array;
    using _STD get;
} // namespace tr1
#endif // _HAS_TR1_NAMESPACE
_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _ARRAY_
