// print standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _PRINT_
#define _PRINT_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#ifndef __cpp_lib_print
_EMIT_STL_WARNING(STL4038, "The contents of <print> are available only with C++23 or later.");
#else // ^^^ !defined(__cpp_lib_print) / defined(__cpp_lib_print) vvv

#include <__msvc_print.hpp>
#include <chrono>
#include <cstdio>
#include <format>
#include <string>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN

inline void _Print_noformat_nonunicode_impl(FILE* const _Stream, const string_view _Str) {
    const bool _Was_write_successful = (_STD fputs(_Str.data(), _Stream) != EOF);

    if (!_Was_write_successful) [[unlikely]] {
        throw system_error{_STD make_error_code(static_cast<errc>(errno))};
    }
}

template <bool _Add_newline>
void _Vprint_nonunicode_impl(FILE* const _Stream, const string_view _Fmt_str, const format_args _Fmt_args) {
    const string _Output_str = [&]() {
        if constexpr (_Add_newline) {
            return _STD vformat(_Fmt_str, _Fmt_args) + '\n';
        } else {
            return _STD vformat(_Fmt_str, _Fmt_args);
        }
    }();

    _STD _Print_noformat_nonunicode_impl(_Stream, _Output_str);
}

inline void _Print_noformat_unicode_impl(FILE* const _Stream, const string_view _Str) {
    const __std_file_stream_pointer _File_stream =
        static_cast<__std_file_stream_pointer>(reinterpret_cast<underlying_type_t<__std_file_stream_pointer>>(_Stream));
    const __std_unicode_console_retrieval_result _Unicode_console_retrieval_result{
        __std_get_unicode_console_handle_from_file_stream(_File_stream)};

    // See the documentation for __std_unicode_console_retrieval_result to understand why we do this.
    bool _Is_unicode_console;

#pragma warning(push)
#pragma warning(disable : 4061) // enumerator not explicitly handled by switch label
    switch (_Unicode_console_retrieval_result._Error) {
    case __std_win_error::_Success:
        {
            _Is_unicode_console = true;
            break;
        }

    case __std_win_error::_File_not_found:
        {
            _Is_unicode_console = false;
            break;
        }

    case __std_win_error::_Not_supported:
        [[unlikely]] return;

    default:
        [[unlikely]] _STD _Throw_system_error_from_std_win_error(_Unicode_console_retrieval_result._Error);
    }
#pragma warning(pop)

    if (_Is_unicode_console) {
        const bool _Was_flush_successful = (_STD fflush(_Stream) == 0);

        if (!_Was_flush_successful) [[unlikely]] {
            throw system_error{_STD make_error_code(static_cast<errc>(errno))};
        }

        const __std_win_error _Console_print_result =
            __std_print_to_unicode_console(_Unicode_console_retrieval_result._Console_handle, _Str.data(), _Str.size());

        if (_Console_print_result != __std_win_error::_Success) [[unlikely]] {
            _STD _Throw_system_error_from_std_win_error(_Console_print_result);
        }
    } else {
        _STD _Print_noformat_nonunicode_impl(_Stream, _Str);
    }
}

template <bool _Add_newline>
void _Vprint_unicode_impl(FILE* const _Stream, const string_view _Fmt_str, const format_args _Fmt_args) {
    const string _Output_str = [&]() {
        if constexpr (_Add_newline) {
            return _STD vformat(_Fmt_str, _Fmt_args) + '\n';
        } else {
            return _STD vformat(_Fmt_str, _Fmt_args);
        }
    }();

    _Print_noformat_unicode_impl(_Stream, _Output_str);
}

template <bool _Add_newline>
void _Print_noformat_unicode(FILE* const _Stream, const string_view _Str) {
    if constexpr (_Add_newline) {
        const string _Output_str{string{_Str} + '\n'};
        _STD _Print_noformat_unicode_impl(_Stream, _Output_str);
    } else {
        _STD _Print_noformat_unicode_impl(_Stream, _Str);
    }
}

template <bool _Add_newline>
void _Print_noformat_nonunicode(FILE* const _Stream, const string_view _Str) {
    if constexpr (_Add_newline) {
        const string _Output_str{string{_Str} + '\n'};
        _STD _Print_noformat_nonunicode_impl(_Stream, _Output_str);
    } else {
        _STD _Print_noformat_nonunicode_impl(_Stream, _Str);
    }
}

template <bool _Add_newline, class... _Types>
void _Print_impl(FILE* const _Stream, const _Print_string<_Types...> _Fmt, _Types&&... _Args) {
    // We can expect the case of using std::print() or std::println() without any format
    // strings to be common enough to warrant optimization. We can actually check at compile
    // time as to whether or not any formatting needs to be done by checking if both the
    // string does not have any escaped brace characters (i.e., {{ or }}) and
    // sizeof...(_Types) == 0; in that case, we don't need to use std::format. This should
    // lead to much better code generation.
    constexpr bool _Has_format_args = (sizeof...(_Types) > 0);

    if constexpr (_Is_ordinary_literal_encoding_utf8) {
        if constexpr (_Has_format_args) {
            _STD _Vprint_unicode_impl<_Add_newline>(
                _Stream, _Fmt._Get(), _STD make_format_args(_STD forward<_Types>(_Args)...));
        } else {
            const typename _Print_string<_Types...>::_Format_string_type _Str_type = _Fmt._Get_type();
            if (_Str_type == _Print_string<_Types...>::_Format_string_type::_Requires_formatting) {
                _STD _Vprint_unicode_impl<_Add_newline>(
                    _Stream, _Fmt._Get(), _STD make_format_args(_STD forward<_Types>(_Args)...));
            } else {
                _STD _Print_noformat_unicode<_Add_newline>(_Stream, _Fmt._Get());
            }
        }
    } else {
        if constexpr (_Has_format_args) {
            _STD _Vprint_nonunicode_impl<_Add_newline>(
                _Stream, _Fmt._Get(), _STD make_format_args(_STD forward<_Types>(_Args)...));
        } else {
            const typename _Print_string<_Types...>::_Format_string_type _Str_type = _Fmt._Get_type();
            if (_Str_type == _Print_string<_Types...>::_Format_string_type::_Requires_formatting) {
                _STD _Vprint_nonunicode_impl<_Add_newline>(
                    _Stream, _Fmt._Get(), _STD make_format_args(_STD forward<_Types>(_Args)...));
            } else {
                _STD _Print_noformat_nonunicode<_Add_newline>(_Stream, _Fmt._Get());
            }
        }
    }
}

_EXPORT_STD template <class... _Types>
void print(FILE* const _Stream, const _Print_string<_Types...> _Fmt, _Types&&... _Args) {
    _STD _Print_impl<false>(_Stream, _Fmt, _STD forward<_Types>(_Args)...);
}

_EXPORT_STD template <class... _Types>
void print(const _Print_string<_Types...> _Fmt, _Types&&... _Args) {
    _STD print(stdout, _Fmt, _STD forward<_Types>(_Args)...);
}

_EXPORT_STD template <class... _Types>
void println(FILE* const _Stream, const _Print_string<_Types...> _Fmt, _Types&&... _Args) {
    // Equivalent to:
    //
    // std::print(_Stream, "{}\n", std::format(_Fmt, std::forward<_Types>(_Args)...));
    _STD _Print_impl<true>(_Stream, _Fmt, _STD forward<_Types>(_Args)...);
}

_EXPORT_STD template <class... _Types>
void println(const _Print_string<_Types...> _Fmt, _Types&&... _Args) {
    _STD println(stdout, _Fmt, _STD forward<_Types>(_Args)...);
}

_EXPORT_STD template <int = 0> // improves throughput, see GH-2329
void vprint_unicode(FILE* const _Stream, const string_view _Fmt_str, const format_args _Fmt_args) {
    _STD _Vprint_unicode_impl<false>(_Stream, _Fmt_str, _Fmt_args);
}

_EXPORT_STD template <int = 0> // improves throughput, see GH-2329
void vprint_unicode(const string_view _Fmt_str, const format_args _Fmt_args) {
    _STD vprint_unicode(stdout, _Fmt_str, _Fmt_args);
}

_EXPORT_STD template <int = 0> // improves throughput, see GH-2329
void vprint_nonunicode(FILE* const _Stream, const string_view _Fmt_str, const format_args _Fmt_args) {
    _STD _Vprint_nonunicode_impl<false>(_Stream, _Fmt_str, _Fmt_args);
}

_EXPORT_STD template <int = 0> // improves throughput, see GH-2329
void vprint_nonunicode(const string_view _Fmt_str, const format_args _Fmt_args) {
    _STD vprint_nonunicode(stdout, _Fmt_str, _Fmt_args);
}

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // __cpp_lib_print
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _PRINT_
