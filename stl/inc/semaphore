// semaphore standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _SEMAPHORE_
#define _SEMAPHORE_
#include <yvals.h>
#if _STL_COMPILER_PREPROCESSOR

#ifdef _M_CEE_PURE
#error <semaphore> is not supported when compiling with /clr:pure.
#endif // _M_CEE_PURE

#if !_HAS_CXX20
#pragma message("The contents of <semaphore> are available only with C++20 or later.")
#else // ^^^ !_HAS_CXX20 / _HAS_CXX20 vvv

#include <atomic>
#include <chrono>
#include <limits.h>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("max")
#undef max

_STD_BEGIN

template <ptrdiff_t _Least_max_value = INT_MAX>
class counting_semaphore {
public:
    [[nodiscard]] static constexpr ptrdiff_t max() noexcept {
        return (1ULL << (sizeof(_Counter_type) * CHAR_BIT - 1)) - 1;
    }

    constexpr explicit counting_semaphore(const ptrdiff_t _Desired) noexcept /* strengthened */
        : _Counter(static_cast<_Counter_type>(_Desired)) {
        _STL_VERIFY(
            _Desired >= 0 && _Desired <= max(), "Initial count shall be non-negative and shall not exceed max()");
    }

    ~counting_semaphore() = default;

    counting_semaphore(const counting_semaphore&) = delete;
    counting_semaphore& operator=(const counting_semaphore&) = delete;

    void release(const ptrdiff_t _Update = 1) noexcept /* strengthened */ {
        if (_Update == 0) {
            return;
        }
        _STL_VERIFY(_Update > 0 && _Update <= max(), "Update count shall be non-negative and shall not overflow max()");
        const _Counter_type _Prev = _Counter.fetch_add(static_cast<_Counter_type>(_Update), memory_order_release);
        _STL_VERIFY(_Prev + _Update > 0, "Semaphore counter shall be non-negative and shall not overflow max()");

        if (_Prev == 0) {
            _Counter.notify_all();
        }
    }

    void acquire() noexcept /* strengthened */ {
        _Counter_type _Current = _Counter.load(memory_order_relaxed);
        for (;;) {
            while (_Current == 0) {
                // Even though atomic wait does not return spuriously, need while loop since load may still load zero
                // And since have to use loop anyway, use more direct API that wakes spuriosly
                __std_atomic_wait_direct(&_Counter, &_Current, sizeof(_Current), _Atomic_wait_no_timeout);
                _Current = _Counter.load(memory_order_relaxed);
            }
            _STL_VERIFY(_Current > 0, "Semaphore counter shall be non-negative and shall not overflow max()");
            if (_Counter.compare_exchange_weak(
                    _Current, _Current - 1, std::memory_order_acquire, std::memory_order_relaxed)) {
                break;
            }
        }
    }

    [[nodiscard]] bool try_acquire() noexcept {
        _Counter_type _Current = _Counter.load(memory_order_relaxed);
        if (_Current == 0) {
            return false;
        }
        _STL_VERIFY(_Current > 0, "Semaphore counter shall be non-negative and shall not overflow max()");
        return _Counter.compare_exchange_weak(
            _Current, _Current - 1, std::memory_order_acquire, std::memory_order_relaxed);
    }

    template <class _Rep, class _Period>
    [[nodiscard]] bool try_acquire_for(const chrono::duration<_Rep, _Period>& _Rel_time) {
        auto _Rel_time_ms      = chrono::duration_cast<chrono::duration<unsigned long, milli>>(_Rel_time);
        auto _Deadline         = __std_atomic_wait_get_deadline(_Rel_time_ms.count());
        _Counter_type _Current = _Counter.load(memory_order_relaxed);
        for (;;) {
            while (_Current == 0) {
                const auto _Remaining_timeout = __std_atomic_wait_get_remaining_timeout(_Deadline);
                if (_Remaining_timeout == 0) {
                    return false;
                }
                __std_atomic_wait_direct(&_Counter, &_Current, sizeof(_Current), _Remaining_timeout);
                _Current = _Counter.load(memory_order_relaxed);
            }
            _STL_VERIFY(_Current > 0, "Semaphore counter shall be non-negative and shall not overflow max()");
            if (_Counter.compare_exchange_weak(
                    _Current, _Current - 1, std::memory_order_acquire, std::memory_order_relaxed)) {
                return true;
            }
        }
    }

    template <class _Clock, class _Duration>
    [[nodiscard]] bool try_acquire_until(const chrono::time_point<_Clock, _Duration>& _Abs_time) {
        _Counter_type _Current = _Counter.load(memory_order_relaxed);
        for (;;) {
            while (_Current == 0) {
                auto _Now = _Clock::now();
                if (_Now >= _Abs_time) {
                    return false;
                }

                auto _Rel_time = _Abs_time - _Now;
                chrono::duration<unsigned long, milli> _Rel_time_ms;
                static constexpr auto _Ten_days = chrono::hours(24 * 10);
                if (_Rel_time >= _Ten_days) {
                    _Rel_time_ms = _Ten_days;
                } else {
                    _Rel_time_ms = chrono::duration_cast<chrono::duration<unsigned long, milli>>(_Rel_time);
                }
                __std_atomic_wait_direct(&_Counter, &_Current, sizeof(_Current), _Rel_time_ms.count());
                _Current = _Counter.load(memory_order_relaxed);
            }
            _STL_VERIFY(_Current > 0, "Semaphore counter shall be non-negative and shall not overflow max()");
            if (_Counter.compare_exchange_weak(
                    _Current, _Current - 1, std::memory_order_acquire, std::memory_order_relaxed)) {
                return true;
            }
        }
    }

private:
    using _Counter_type = conditional_t<_Least_max_value <= SCHAR_MAX, signed char,
        conditional_t<_Least_max_value <= SHRT_MAX, short, conditional_t<_Least_max_value <= INT_MAX, int, ptrdiff_t>>>;
    atomic<_Counter_type> _Counter;
};

template <>
class counting_semaphore<1> {
public:
    [[nodiscard]] static constexpr ptrdiff_t max() noexcept {
        return 1;
    }

    constexpr explicit counting_semaphore(const ptrdiff_t _Desired) noexcept /* strengthened */
        : _Counter(static_cast<int8_t>(_Desired)) {
        _STL_VERIFY((_Desired & ~1) == 0, "Semaphore counter shall be non-negative and shall not overflow max()");
    }

    ~counting_semaphore() = default;

    counting_semaphore(const counting_semaphore&) = delete;
    counting_semaphore& operator=(const counting_semaphore&) = delete;

    void release(const ptrdiff_t _Update = 1) {
        if (_Update == 0) {
            return;
        }
        _STL_VERIFY(_Update == 1, "Update count shall be non-negative and shall not oveflow max()");

        _Counter.store(1, memory_order_release);
        _Counter.notify_one();
    }

    void acquire() noexcept /* strengthened */ {
        for (;;) {
            int8_t _Prev = _Counter.exchange(0, std::memory_order_acquire);
            if (_Prev == 1) {
                break;
            }
            _STL_VERIFY(_Prev == 0, "Semaphore counter shall be non-negative and shall not overflow max()");
            _Counter.wait(0, std::memory_order_relaxed);
        }
    }

    [[nodiscard]] bool try_acquire() noexcept {
        int8_t _Prev = _Counter.exchange(0, std::memory_order_acquire);
        _STL_VERIFY((_Prev & ~1) == 0, "Semaphore counter shall be non-negative and shall not overflow max()");
        return reinterpret_cast<const bool&>(_Prev);
    }

    template <class _Rep, class _Period>
    [[nodiscard]] bool try_acquire_for(const chrono::duration<_Rep, _Period>& _Rel_time) {
        auto _Rel_time_ms = chrono::duration_cast<chrono::duration<unsigned long long, milli>>(_Rel_time);
        auto _Deadline    = __std_atomic_wait_get_deadline(_Rel_time_ms.count());
        for (;;) {
            int8_t _Prev = _Counter.exchange(0, std::memory_order_acquire);
            if (_Prev == 1) {
                return true;
            }
            _STL_VERIFY(_Prev == 0, "Semaphore counter shall be non-negative and shall not overflow max()");
            const auto _Remaining_timeout = __std_atomic_wait_get_remaining_timeout(_Deadline);
            if (_Remaining_timeout == 0) {
                return false;
            }
            __std_atomic_wait_direct(&_Counter, &_Prev, sizeof(_Prev), _Remaining_timeout);
        }
    }

    template <class _Clock, class _Duration>
    [[nodiscard]] bool try_acquire_until(const chrono::time_point<_Clock, _Duration>& _Abs_time) {
        for (;;) {
            int8_t _Prev = _Counter.exchange(0, std::memory_order_acquire);
            if (_Prev == 1) {
                return true;
            }
            _STL_VERIFY(_Prev == 0, "Semaphore counter shall be non-negative and shall not overflow max()");

            auto _Now = _Clock::now();
            if (_Now >= _Abs_time) {
                return false;
            }

            auto _Rel_time = _Abs_time - _Now;
            chrono::duration<unsigned long, milli> _Rel_time_ms;
            static constexpr auto _Ten_days = chrono::hours(24 * 10);
            if (_Rel_time >= _Ten_days) {
                _Rel_time_ms = _Ten_days;
            } else {
                _Rel_time_ms = chrono::duration_cast<chrono::duration<unsigned long, milli>>(_Rel_time);
            }
            __std_atomic_wait_direct(&_Counter, &_Prev, sizeof(_Prev), _Rel_time_ms.count());
        }
    }

private:
    atomic<int8_t> _Counter;
};

using binary_semaphore = counting_semaphore<1>;

_STD_END

#pragma pop_macro("max")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // ^^^ _HAS_CXX20 ^^^

#endif // _STL_COMPILER_PREPROCESSOR
#endif // _SEMAPHORE_
