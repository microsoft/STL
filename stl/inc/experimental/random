// random experimental header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _EXPERIMENTAL_RANDOM_
#define _EXPERIMENTAL_RANDOM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR

#include <random>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN
namespace experimental {
    inline namespace fundamentals_v3 {

        inline default_random_engine& _Engine() {
            thread_local default_random_engine _Eng{random_device{}()};
            return _Eng;
        }

        template <class _IntType>
        _IntType randint(const _IntType _Min, const _IntType _Max) {
            _RNG_REQUIRE_INTTYPE(randint(), _IntType);
            _STL_ASSERT(_Min <= _Max, "invalid min and max arguments for randint()");
            return uniform_int_distribution<_IntType>{_Min, _Max}(_Engine());
        }

        inline void reseed(const default_random_engine::result_type _Value = random_device{}()) {
            _Engine().seed(_Value);
        }
    } // namespace fundamentals_v3
} // namespace experimental
_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // _STL_COMPILER_PREPROCESSOR
#endif // _EXPERIMENTAL_RANDOM_
